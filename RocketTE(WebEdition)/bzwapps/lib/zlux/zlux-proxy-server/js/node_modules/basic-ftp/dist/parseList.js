"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseList = void 0;
//import { FileInfo } from "./FileInfo"
const mvsParser = __importStar(require("./parseListMVS"));
const mvsParser2 = __importStar(require("./parseListMVS2"));
const mvsParser5 = __importStar(require("./parseListMVS5"));
const mvsParser7 = __importStar(require("./parseListMVS7"));
const mvsParser8 = __importStar(require("./parseListMVS8"));
const as400Parser = __importStar(require("./parseListAS400"));
const dosParser = __importStar(require("./parseListDOS"));
const unixParser = __importStar(require("./parseListUnix"));
const mlsdParser = __importStar(require("./parseListMLSD"));
const tandemParser = __importStar(require("./parseListTandem"));
const vosParser = __importStar(require("./parseListVOS"));
const netwareParser = __importStar(require("./parseListNetware"));
const vseParser = __importStar(require("./parseListVSE"));
const vmsParser = __importStar(require("./parseListVMS"));
const vmParser = __importStar(require("./parseListVM"));
const Consts_1 = require("./Consts");
function firstCompatibleParser(line, parsers, ftp) {
    return parsers.find(parser => parser.testLine(line, ftp) === true);
}
function stringIsNotBlank(str) {
    return str.trim() !== "";
}
const REGEX_NEWLINE = /\r?\n/;
/**
 * Parse raw directory listing.
 */
function parseList(rawList, serverType, JES, hasMLSD, ftp) {
    //rawList = "Volume Unit    Referred Ext Used Recfm Lrecl BlkSz Dsorg Dsname\nGL2084 3390 2016/04/13 1 15 VB 27994 27998 PS F006\nMigrated                                                 OAQPS.INTERIM.CNTYIM.V1.DATA.D052093\n870376 Tape                                              F011\nMSN001 3390 **NONE** 1 15 NONE 0 0 PO SCRTOOL.CSV\nARCIVE Not Direct Access Device                         BS.BLM.W2.TEST.A122700\n                                                   GDG  BS.EFF.COSTFILE\nMIGRAT                                                    ??    P75709.ZSECURE.HOLDDATA\nTSM002 3390 2011/02/22 1 225 U 0 0 HFS DIRXML.HFS\nTSM001 3390                                        VSAM DDIR.D\nTSM002 3390   2011/02/17  1    3  U     6447  6447 PO-E PDSE.LOADLIB\n";
    //rawList = " Name     VV.MM   Created       Changed      Size  Init   Mod   Id\nALLDBCS\nBLUEZONE\nLICENSE\nPRINTJCL 01.18 2013/04/26 2014/01/16 22:22 9 9 0 TSLXW\nS0C4X\nTEST 01.98 2013/04/17 2014/02/26 04:26 14 9 0 TSLMW\nTESTA 01.01 2013/04/27 2013/12/02 03:11 256 256 0 TSLMW\nTESTC\nTEST1 01.13 2013/04/17 2013/04/26 05:52 17 8 0 TSXXH\n";
    //rawList = "lrwxrwxrwx storageGroup  storage           14 Mar 26 21:07 symlinks -> /123456/videos\ndrwxrwxr-x storageGroup  storage            0 Mar 26 20:21 videos\n";
    //rawList = "File         Code             EOF  Last Modification    Owner  RWEP\nA1TXT         101             5574 19-Mar-12 10:09:52  92,166 \"nnnn\"\nA2TXT         101             7628 19-Mar-12 10:09:52  92,166 \"nnnn\"\nA8KCMD30      101              334 14-Feb-06 08:18:26  92,165 \"nnnn\"\nA8KCMD37      101             2504 14-Feb-06 08:18:26  92,165 \"nnnn\"\nABSTRACT      101             6882 19-Apr-00 09:44:51  92,165 \"nnnn\"\n"
    //rawList="total 18\ndrwxrwx---   1 ROCKET.MIKEJ      ROCKET   4096 Oct 23 09:53 .\ndrwxr-xr-x   1 SUPER.SUPER       SUPER    4096 Oct 31 12:40 ..\n-rwxrwx---   1 ROCKET.MIKEJ      SUPER    268 Oct 19 10:29 .profile\n-rw-------   1 ROCKET.MIKEJ      ROCKET   898 Nov 01 11:52 .sh_history\n"
    //rawList = "Files: 1  Blocks: 1\n\nw      1  seq       09-05-20 15:28:06  Testingstxt\n\n\nDirs: 14\n\nm      1  07-08-29 11:50:06  271\nn      1  07-10-10 15:44:31  276I\nm      1  07-08-29 11:50:06  277\nm     13  09-05-20 07:12:51  5001\nm     16  09-05-20 07:14:40  835\nn     48  09-05-19 18:02:08  837I\nn      1  07-07-02 20:04:15  edit_input\nm      1  08-07-14 20:00:08  espr\nm     22  09-05-20 07:11:56  fa\nn      1  07-07-02 20:04:14  raw_input\nn      1  07-07-02 20:04:14  recon\nn      1  07-07-02 20:04:15  rpt\nm     48  09-05-19 18:01:36  x12_bal\nn     48  09-05-20 15:31:37  x12_raw\n\nLinks: 0\n"
    //rawList = "- [RWCE-FM-] bubble.ou=gum.ou=do..           41472 Mar 11  2003 my test map.doc\nd [RWCE-FM-] bubble.ou=gum.ou=do..             512 Jan 15  2001 1997\nd [RWCE-FM-] ego.ou=guest..                    512 Jan 31 15:05 OldStuff\n"
    //rawList = "POWER              <Power Queues>\nIJSYSRS            <Library>\nPRD1               <Library>\nBIMEDLIB           <BIM-Edit>\nSAMFILES           <Directory>\nVSAMMCAT           <VSAM Catalog>\nVSAMUCAT           <VSAM Catalog>\nHFSTST             <HFS>\nHFS001             <HFS>\nICCF               <Directory>\nANALYZE            Sequential Access\nTSTKSDS            Key Seq VSAM\nDFHTEMP            Entry Seq VSAM\n"
    //rawList = "CONFIG      <SubLibrary>    38        54   11/01/24  10:54\nSCEEBASE    <SubLibrary>  5855    49,460   11/01/24  10:54\n"
    //rawList = "DFHFCTC2.PHASE  2088    3   11/02/23    15:16   11/02/23    15:36   SN\nDFHRDTSP.PHASE   396    1   11/01/24    12:04                       SN\nDFHTCTSP.PHASE  5544    6   11/01/24    11:35   11/01/24    12:04   SN\nDTRTERM1.PHASE   140    1   11/01/24    12:04                       SN\nDTRIIST.PROC      80    1   11/04/16    17:20   11/04/16    17:51   FN\nDTRINNW.PROC      80    1   11/04/16    17:18   11/04/16    18:32   FN\nDLM1.PROFDIT1    160    1   10/11/05    16:19                       FN\n"
    //rawList = "LPRTEST.08730.000   59  4    54  3   K   07/08/10    17:48\nJRR20526.05663.000 168  6   168  3   D   05/26/11    18:41\n"
    //rawList = "VSE.POWER.ACCOUNT.FILE              10/01/18    12:00   1024    D\nVSESP.JOB.MANAGER.FILE              10/02/19    12:00   1024    S\nZ9999994.VSAMDSPC.TAF9D957.TC570788 10/11/24    12:00   1024    V\n"
    //rawList = "17/01/2010  12:12    <DIR>                   CSIVSEDW\n23/02/2010  20:11    333,557 S   4096    B   COWBOYCLOSEUP.JPG\n"
    //rawList = "USERS: [HOLMES]\nCOPY.COM;4     2     1-APR-2017 08:49 [HOLMES] (RWD,RWD,R,R)\nLOGIN.COM;1    5     1-APR-2017 01:25 [HOLMES] (RWD,RWD,R,R)\nTEST.DIR;1    5     1-APR-2017 01:25 [HOLMES] (RWD,RWD,R,R)\nTEST.DIR;1    5     1-APR-2017 01:25\n"
    //rawList = "ENDTRACE  TCPIP    F   80   1   1 1999-07-28 12:24:01 TCM191\nLASTING   GLOBALV  V   43  10   1 1999-11-16  9:05:22 TCM191\nNOTRACE   TCPIP    F   80   1   1 1999-12-16 13:39:21 TCM191\nOBEY      EXEC     V   72 153   2 1996-01-03 16:07:07 TCM191\nPACKMODL  TESTFILE F 1024 468 117 1996-07-28 13:56:36 TCM191\nPROFILE   EXEC     V   30  10   1 1999-11-16  9:01:10 TCM191\nRECF80    TESTFILE F   80   5   1 2000-01-17 14:47:19 TCM191\nSETX      XEDIT    V   46  13   1 1999-11-04  9:13:53 TCM191\nTCPIP     DATA     V   72  99   2 1999-11-18 17:24:05 TCM191\nTCPMNT2   NETLOG   V  108  48   2 2000-01-17 14:49:09 TCM191\nTCPMNT2   SYNONYM  F   80  10   1 1999-11-10  8:46:12 TCM191\nTCPSLVL   EXEC     V   37  23   1 1999-02-05 13:20:46 TCM191\n"
    //rawList = "05/20/2000 13:38:19  F  1   65758 'bfsline.cpy'\n05/19/2000 11:02:15  F  1   65758 'bfsline.txt'\n06/03/2000 12:27:48  F  1   15414 'bfstest.cpy'\n05/20/2000 13:38:05  F  1   15414 'bfstest.output'\n05/20/2000 13:38:42  F  1  772902 'bfswork.output'\n03/31/2000 15:49:27  F  1  782444 'bfswork.txt'\n05/20/2000 13:39:20  F  1   13930 'lotsonl.putdata'\n05/19/2000 09:41:21  F  1   13930 'lotsonl.txt'\n06/15/2000 09:29:25  F  1     278 'mail.maw'\n05/20/2000 13:39:34  F  1     278 'mail.putdata'\n05/20/2000 15:30:45  F  1   13930 'nls.new'\n05/20/2000 14:02:24  F  1   13931 'nls.txt'\n08/21/2000 10:03:17  F  1     328 'rock.rules'\n05/20/2000 13:40:05  F  1      58 'testfil2.putdata'\n04/26/2000 14:34:42  F  1      63 'testfil2.txt'\n08/21/2000 05:28:40  D  -       - 'ALTERNATE'\n12/28/2000 17:36:19  D  -       - 'FIRST'\n"
    //rawList = "0013 SMTP    00000011 1999-11-03 12:46:10 CIBULAPR MAIL\n0154 RSCS    00002789 1999-12-29 10:12:46 FL3XSAMP TXT\n0116 TCPLVL2 00000170 1999-12-16 11:39:07 TCP-HELP LIST3820\n0115 TCPLVL2 00002874 1999-12-16 11:39:06 TCP-OVER LIST3820\n0153 RSCS    00002825 1999-06-29 10:12:45 FL32SAMP TXT\n0214 SMTP    00000015 2000-01-14 12:50:10 CIBULAMA MAIL\n"
    //rawList = "0006 MKTJML   00000014 2007-08-09 11:18:06\n0008 MKTKEW   00000017 2007-08-09 11:35:08\n0009 MKTKEW   00000007 2007-08-09 13:26:40\n0007 MKTKEW   00000014 2007-08-09 10:38:12\n"
    const lines = rawList
        .split(REGEX_NEWLINE)
        .filter(stringIsNotBlank);
    let i = 0;
    let testLine;
    if (lines.length === 0) {
        lines.push("");
    }
    else if (lines[i] == ".") {
        i++;
        if (lines[i] == "..") {
            i++;
        }
    }
    testLine = lines[i];
    /**
     * Available directory listing parsers. These are candidates that will be tested
     * in the order presented. The first candidate will be used to parse the whole list.
     */
    var availableParsers = [];
    ftp.log("serverType: " + serverType);
    switch (serverType) {
        case Consts_1.Consts.FTP_SERVER_TYPE_AS400:
            availableParsers.push(as400Parser, unixParser);
            break;
        case Consts_1.Consts.FTP_SERVER_TYPE_MVS:
            if (JES == 1)
                availableParsers.push(mvsParser7, mvsParser8);
            else if (JES == 2)
                availableParsers.push(mvsParser8);
            else
                availableParsers.push(mvsParser, mvsParser2, mvsParser5, mvsParser7, mvsParser8, unixParser);
            break;
        case Consts_1.Consts.FTP_SERVER_TYPE_VM:
            availableParsers.push(vmParser, unixParser);
            break;
        case Consts_1.Consts.FTP_SERVER_TYPE_VSE:
            availableParsers.push(vseParser, unixParser);
            break;
        default:
        case Consts_1.Consts.FTP_SERVER_TYPE_UNIX:
            availableParsers.push(unixParser);
            break;
        case Consts_1.Consts.FTP_SERVER_TYPE_WINDOWS:
            availableParsers.push(unixParser, dosParser);
            break;
        case Consts_1.Consts.FTP_SERVER_TYPE_VMS:
            availableParsers.push(vmsParser, unixParser);
            break;
        case Consts_1.Consts.FTP_SERVER_TYPE_NETWARE:
            availableParsers.push(netwareParser);
            break;
        case Consts_1.Consts.FTP_SERVER_TYPE_VOS:
            availableParsers.push(vosParser);
            break;
        case Consts_1.Consts.FTP_SERVER_TYPE_NONSTOP:
            availableParsers.push(tandemParser, unixParser);
            break;
    }
    if (hasMLSD)
        availableParsers.push(mlsdParser);
    const parser = firstCompatibleParser(testLine, availableParsers, ftp);
    if (!parser) {
        //throw new Error("This library only supports MLSD, Unix- or DOS-style directory listing. Your FTP server seems to be using another format. You can see the transmitted listing when setting `client.ftp.verbose = true`. You can then provide a custom parser to `client.parseList`, see the documentation for details.")
        ftp.log("Unknown list format");
        let obj2 = [];
        return obj2;
    }
    const files = lines
        .map(line => parser.parseLine(line, ftp))
        .filter((info) => info !== undefined);
    return parser.transformList(files);
}
exports.parseList = parseList;
