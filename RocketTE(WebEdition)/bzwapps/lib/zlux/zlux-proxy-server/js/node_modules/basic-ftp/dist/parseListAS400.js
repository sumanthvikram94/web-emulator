"use strict";
//import { FileInfo, FileType } from "./FileInfo"
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformList = exports.parseLine = exports.testLine = void 0;
//const JA_MONTH = "\u6708"
//const JA_DAY   = "\u65e5"
//const JA_YEAR  = "\u5e74"
var lastGroup = [];
const RE_LINE3 = new RegExp(
//Name
"(.*)"); // Name
const RE_LINE2 = new RegExp(
//GRPPWRUSR                               *MEM       #0SLI1.TXT
"(\\S+)" // Owner
    + "\\s+"
    + "(\\S+)" // Type
    + "\\s+" // separator
    + "(\\S+)" // Name
    + "(.*)"); // the rest
const RE_LINE = new RegExp(
//owner size date time type name
/*
owner   The 10-character string that represents the user profile which owns the subject. This string is left-aligned, and includes blanks. This field is blank for anonymous FTP sessions.
size    The 10-character number that represents the size of the object. This number is right-aligned, and includes blanks. This field is blank when an object has no size associated with it.
date    The 8-character modification date in the format that is defined for the server job. It uses date separators that are defined for the server job. This modification date is left-aligned, and it includes blanks.
time    The 8-character modification time that uses the time separator, which the server job defines.
type    The 10-character i5/OS object type.
name    The variable length name of the object that follows a CRLF (carriage return, line feed pair). This name can include blanks.
*/
//GRPPWRUSR       32768 06/23/20 22:24:30 *FILE      #0SLI1
"(\\S+)" // Owner
    + "\\s+" // separator
    + "(\\d+)"
    + "\\s+"
    + "(\\S+)"
    + "\\s+"
    + "(\\S+)"
    + "\\s+"
    + "(\\S+)" // Type
    + "\\s+" // separator
    + "(\\S+)" // Name
    + "(.*)"); // the rest
/**
 * Returns true if a given line might be a AS400-style listing.
 *
  */
function testLine(line, ftp) {
    /*
    if ( line == "Volume Unit    Referred Ext Used Recfm Lrecl BlkSz Dsorg Dsname" ) {
        return true
    }
    return false*/
    ftp.log("testLine: " + line);
    ftp.log("test: " + RE_LINE.test(line));
    lastGroup = []; //reset
    if ((line == "") || (RE_LINE.test(line))) {
        return true;
    }
    else if (RE_LINE2.test(line)) {
        return true;
    }
    else {
        return RE_LINE3.test(line);
    }
}
exports.testLine = testLine;
/**
 * Parse a single line of a AS400-style directory listing.
 */
function parseLine(line, ftp) {
    ftp.log("parseLineAS400: " + line);
    let obj = {};
    if (line == "") {
        obj.Name = "";
        obj.Owner = "";
        obj.Type = "";
        obj.Size = "";
        obj.Date = "";
        return obj;
    }
    let groups = line.match(RE_LINE);
    if (groups === null) {
        groups = line.match(RE_LINE2);
        if (groups === null) {
            groups = line.match(RE_LINE3);
            if (groups === null) {
                return undefined;
            }
        }
    }
    //owner size date time type name
    ftp.log(groups);
    ftp.log(JSON.stringify(groups));
    if ((groups.length) > 5) {
        obj.Name = groups.slice(6).join('');
        obj.Owner = groups[1];
        obj.Type = groups[5];
        obj.Size = groups[2];
        obj.Date = groups[3] + " " + groups[4];
        lastGroup = groups;
    }
    else if (groups.length == 2) {
        obj.Name = groups[1];
        if ((lastGroup) && (lastGroup.length > 5)) {
            obj.Owner = "";
            obj.Type = "";
            obj.Size = 0;
            obj.Date = "";
        }
    }
    else {
        obj.Name = groups[3];
        obj.Owner = groups[1];
        obj.Type = groups[2];
        if ((lastGroup) && (lastGroup.length > 5)) {
            obj.Size = lastGroup[2]; //recover the information from the previous *FILE
            obj.Date = lastGroup[3] + " " + lastGroup[4]; //recover the information from the previous *FILE
        }
    }
    if ((obj.Type == "*DIR") || (obj.Type == "*DDIR") || (obj.Type == "*LIB") || (obj.Type == "*FLR")) {
        obj.Name = obj.Name.slice(0, -1);
        obj.type = "folder";
    }
    else if (obj.Type == "*FILE")
        obj.type = "file"; //special code for *FILE in bzftp, not sure what to do with BZW
    else
        obj.type = "file";
    return obj;
}
exports.parseLine = parseLine;
function transformList(files) {
    return files;
}
exports.transformList = transformList;
