"use strict";
//import { FileInfo, FileType } from "./FileInfo"
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformList = exports.parseLine = exports.testLine = void 0;
//const JA_MONTH = "\u6708"
//const JA_DAY   = "\u65e5"
//const JA_YEAR  = "\u5e74"
const RE_LINE = new RegExp(
// Name Size TTR Alias-of AC ---Attributes--- Amode Rmode
/*
NAME - This is the name of the actual executable program file.
SIZE -This is size of the executable program file in bytes (i.e. hex base 16). e.g. 1D0 would be a program that is 464 bytes long.
TTR - This is the actual track/record location of the file as it lays on the dasd platter. (Not very pertinent from an FTP perspective, in my opinion)
ALIAS OF - This represents as alias entry for a file. i.e. The files alternate name. You will notice that the TTR's match for the files that have aliases because they are essentially the same file, just a different name.
AC - Authorization code of how the program was linked. 0= non-authorized 1=Authorized. This really only has meaning on the mainframe platform much like the TTR data.
ATTRIBUTES - These are the specific attributes of each executable file. I will not explain each one as they really only have meaning in the mainframe arena.
AMODE - Again this is a mainframe specific item that deals with the addressing mode of this executable program file. i.e. is it 24-bit addressable or 31 bit addressable.
RMODE - Like AMODE this is mainframe specific and deals with the residency mode of the executable program file. 24 or 31 bit.
*/
//AKJLKL01  004668   00020C          00 FO          RF RN RU            24    24     
//ALLOC     00D7A8   002304 IKJEFD30 00 FO             RN RU 31    ANY
//ALLOCATE  00D7A8   002304 IKJEFD30 00 FO             RN RU 31    ANY
//ALTER     000168   000E08 IDCAM01  01 FO          RF RN RU 24    24
//ALTLIB    004308   002205 IKJADLIB 00 FO             RN RU 31    ANY
//'SYS1.CMDLIB'
"(\\S+)" // Name
    + "\\s+" // separator
    + "(\\S+)" // Size
    + "\\s+" // separator
    + "(\\S+)" // TTR
    + ".{1}" // separator
    + "(.{8})" // Alias-of
    + "\\s+" // separator
    + "(\\S+)" // AC
    + "\\s+" // separator
    + "(.{20})" // Attributes
    + "\\s+" // separator
    + "(\\S+)" // Amode
    + "\\s+" // separator
    + "(\\S+)" // Rmode
    + "\\s+" // separator
    + "(.*)"); // the rest
/**
 * Returns true if a given line might be a MVS-style listing.
 *
  */
function testLine(line) {
    if (line == " Name      Size     TTR   Alias-of AC --------- Attributes --------- Amode Rmode ") {
        return true;
    }
    return false;
    //return RE_LINE.test(line)
}
exports.testLine = testLine;
/**
 * Parse a single line of a MVS-style directory listing.
 */
function parseLine(line) {
    if (line == " Name      Size     TTR   Alias-of AC --------- Attributes --------- Amode Rmode ")
        return undefined;
    const groups = line.match(RE_LINE);
    if (groups === null) {
        return undefined;
    }
    let obj = {};
    obj.Name = groups[1];
    obj.Size = groups[2];
    obj.TTR = groups[3];
    obj["Alias-of"] = groups[4].trim();
    obj.AC = groups[5];
    obj.Attributes = groups[6];
    obj.Amode = groups[7];
    obj.Rmode = groups[8];
    obj.type = "file";
    return obj;
}
exports.parseLine = parseLine;
function transformList(files) {
    return files;
}
exports.transformList = transformList;
