"use strict";
//import { FileInfo, FileType } from "./FileInfo"
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformList = exports.parseLine = exports.testLine = void 0;
//const JA_MONTH = "\u6708"
//const JA_DAY   = "\u65e5"
//const JA_YEAR  = "\u5e74"
const RE_LINE = new RegExp(
//TSPC01 3390   2017/02/22 14   14  VB     256  6233  PS  MSO2.DLL
//TSPC02 3390   **NONE**    1    1  VB     256  6233  PO  NEWFLDR
"(\\S+)" // Volume
    + "\\s+" // separator
    + "(\\d+)" // Unit
    + "\\s+" // separator
    + "(" +
    "(?:\\d+[-/]\\d+[-/]\\d+)" + // yyyy-mm-dd
    //"|(?:\\S{3}\\s+\\d{1,2})" +  // MMM [d]d
    //"|(?:\\d{1,2}\\s+\\S{3})" + // [d]d MMM
    //"|(?:\\d{1,2}" + JA_MONTH + "\\s+\\d{1,2}" + JA_DAY + ")"+
    "|(?:\\*{2}\\w*\\*{2})" +
    ")"
    + "\\s+" // separator    
    + "(\\d+)" // Ext
    + "\\s+" // separator
    + "(\\d+)" // Used
    + "\\s+" // separator
    + "(\\S+)" // Recfm
    + "\\s+" // separator
    + "(\\d+)" // Lrecl
    + "\\s+" // separator
    + "(\\d+)" // BlkSz
    + "\\s+" // separator
    + "(\\S+)" // Dsorg
    + "\\s+" // separator
    + "(.*)"); // the rest
const RE_LINE1 = new RegExp(
//TSPC06 3390   2021/10/25  740000  U    32760 32760  PS  L1G.ZIP  notice the Ext and Used columns dont have a space inbetween
"(\\S+)" // Volume
    + "\\s+" // separator
    + "(\\d+)" // Unit
    + "\\s+" // separator
    + "(" +
    "(?:\\d+[-/]\\d+[-/]\\d+)" + // yyyy-mm-dd
    //"|(?:\\S{3}\\s+\\d{1,2})" +  // MMM [d]d
    //"|(?:\\d{1,2}\\s+\\S{3})" + // [d]d MMM
    //"|(?:\\d{1,2}" + JA_MONTH + "\\s+\\d{1,2}" + JA_DAY + ")"+
    "|(?:\\*{2}\\w*\\*{2})" +
    ")"
    + "\\s+" // separator    
    + "(\\d+)" // Ext/Used
    + "\\s+" // separator
    + "(\\S+)" // Recfm
    + "\\s+" // separator
    + "(\\d+)" // Lrecl
    + "\\s+" // separator
    + "(\\d+)" // BlkSz
    + "\\s+" // separator
    + "(\\S+)" // Dsorg
    + "\\s+" // separator
    + "(.*)"); // the rest
const RE_LINE2 = new RegExp(
//TSM001 3390                                        VSAM DDIR.I
//ARCIVE Not Direct Access Device                         BS.BLM.W2.TEST.A122700
"(\\S+)" // Volume
    + "\\s+" // separator
    + "(\\S+)" // Unit
    + "\\s+" // separator
    + "(\\S+)" // Dsorg
    + "\\s+" // separator
    + "(.*)"); // Dsname
const RE_LINE3 = new RegExp(
//870376 Tape                                              F011            
//MIGRAT                                                    ??    P75709.ZSECURE.HOLDDATA
"(\\S+)" // Volume
    + "\\s+" // separator
    + "(\\S+)" // Unit
    + "\\s+" // separator
    + "(.*)"); // Dsname
const RE_LINE4 = new RegExp(
//Migrated                                                 OAQPS.INTERIM.CNTYIM.V1.DATA.D052093
//                                                    GDG  BS.EFF.COSTFILE
"(\\S+)" // Volume or Dsorg
    + "\\s+" // separator
    + "(.*)"); // Dsname
/**
 * Returns true if a given line might be a MVS-style listing.
 *
  */
function testLine(line) {
    if (line == "Volume Unit    Referred Ext Used Recfm Lrecl BlkSz Dsorg Dsname") {
        return true;
    }
    return false;
    //return RE_LINE.test(line)
}
exports.testLine = testLine;
/**
 * Parse a single line of a MVS-style directory listing.
 */
function parseLine(line, ftp) {
    if (line == "Volume Unit    Referred Ext Used Recfm Lrecl BlkSz Dsorg Dsname")
        return undefined;
    let groups = line.match(RE_LINE);
    if (groups === null) {
        groups = line.match(RE_LINE1);
        if (groups === null) {
            groups = line.match(RE_LINE2);
            if (groups === null) {
                groups = line.match(RE_LINE3);
                if (groups === null) {
                    groups = line.match(RE_LINE4);
                    if (groups === null) {
                        return undefined;
                    }
                }
            }
        }
    }
    console.log(groups.length);
    console.log(groups);
    ftp.log(groups);
    let obj = {};
    if (groups.length == 3) {
        obj.Dsname = groups[2];
        obj.Date = "";
        obj.Dsorg = "";
        obj.Unit = "";
        obj.Ext = "";
        obj.Used = "";
        obj.Recfm = "";
        obj.Lrecl = "";
        obj.BlkSz = "";
        obj.Volume = "";
        obj.type = "file";
        if (groups[1] == "Migrated")
            obj.Volume = groups[1];
        else
            obj.Dsorg = groups[1];
    }
    else if (groups.length == 4) {
        obj.Dsname = "";
        obj.Date = "";
        obj.Dsorg = "";
        obj.Unit = "";
        obj.Ext = "";
        obj.Used = "";
        obj.Recfm = "";
        obj.Lrecl = "";
        obj.BlkSz = "";
        obj.Volume = groups[1];
        obj.type = "file";
        if (groups[1] == "MIGRAT") {
            obj.Dsname = groups[3];
            obj.Dsorg = groups[2];
        }
        else {
            obj.Dsname = groups[3];
            obj.Unit = groups[2];
        }
    }
    else if (groups.length == 5) {
        obj.Dsname = "";
        obj.Date = "";
        obj.Dsorg = "";
        obj.Unit = "";
        obj.Ext = "";
        obj.Used = "";
        obj.Recfm = "";
        obj.Lrecl = "";
        obj.BlkSz = "";
        obj.Volume = groups[1];
        obj.type = "file";
        if (groups[1] == "ARCIVE") {
            obj.Dsname = groups[4]; //possibily "Direct Access Device                         BS.BLM.W2.TEST.A122700"
            ftp.log(obj.Dsname);
            ftp.log(obj.Dsname.lastIndexOf(" "));
            if (obj.Dsname.lastIndexOf(" ") != -1) {
                obj.Dsname = obj.Dsname.slice(obj.Dsname.lastIndexOf(" "));
            }
        }
        else {
            obj.Dsname = groups[4];
            obj.Dsorg = groups[3];
            obj.Unit = groups[2];
        }
    }
    else {
        if (groups.length == 10) { //Ext and Used stuck together
            let ExtUsed = groups[4];
            if (ExtUsed.length > 5) {
                let Used = ExtUsed.slice(-5);
                let Ext = ExtUsed.slice(0, ExtUsed.length - 5);
                groups[4] = Ext;
                groups.splice(5, 0, Used);
            }
        }
        obj.Dsname = groups[10];
        obj.Date = groups[3];
        obj.Dsorg = groups[9];
        obj.Unit = groups[2];
        obj.Ext = groups[4];
        obj.Used = groups[5];
        obj.Recfm = groups[6];
        obj.Lrecl = groups[7];
        obj.BlkSz = groups[8];
        obj.Volume = groups[1];
        if ((obj.Dsorg == "PO") || (obj.Dsorg == "PO-E") || (obj.Dsorg == "HFS"))
            obj.type = "folder";
        else
            obj.type = "file";
    }
    return obj;
}
exports.parseLine = parseLine;
function transformList(files) {
    return files;
}
exports.transformList = transformList;
