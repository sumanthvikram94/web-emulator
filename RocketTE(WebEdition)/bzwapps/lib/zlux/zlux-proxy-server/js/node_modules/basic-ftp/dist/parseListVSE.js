"use strict";
//import { FileInfo, FileType } from "./FileInfo"
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformList = exports.parseLine = exports.testLine = void 0;
//const JA_MONTH = "\u6708"
//const JA_DAY   = "\u65e5"
//const JA_YEAR  = "\u5e74"
const RE_LINE = new RegExp(
/*
//Also supports unix mode listings...

Root

Name                File Type

File Types:
BIM-Edit
Data Space
Directory
Entry Seq VSAM
HFS
ICCF Library
Key Seq VSAM
Library
Power Queues
Sequential Acces
VSAM Catalog
VSE VTOC

POWER              <Power Queues>
IJSYSRS            <Library>
PRD1               <Library>
BIMEDLIB           <BIM-Edit>
SAMFILES           <Directory>
VSAMMCAT           <VSAM Catalog>
VSAMUCAT           <VSAM Catalog>
HFSTST             <HFS>
HFS001             <HFS>
ICCF               <Directory>
ANALYZE            Sequential Access
TSTKSDS            Key Seq VSAM
DFHTEMP            Entry Seq VSAM
*/
"(\\S+)" // Name
    + "\\s+"
    + "("
    + "<BIM-Edit>|" // File Type
    + "Data Space|"
    + "<Directory>|"
    + "Entry Seq VSAM|"
    + "<HFS>|"
    + "ICCF Library|"
    + "Key Seq VSAM|"
    + "<Library>|"
    + "<Power Queues>|"
    + "<Power Queue>|"
    + "<Power Class>|"
    + "Sequential Acces|"
    + "<VSAM Catalog>|"
    + "<VSE VTOC>"
    + ")");
const RE_LINE2 = new RegExp(
/*
Library Files

VSE sublibrary name
File type. If you are displaying a directory for a library, the file type is always Sub Library.
Members in the sublibrary
Used blocks in the sublibrary
Date and time the sublibrary was created

CONFIG      <SubLibrary>    38        54   11/01/24  10:54
SCEEBASE    <SubLibrary>  5855    49,460   11/01/24  10:54
*/
"(\\S+)" // Name
    + "\\s+"
    + "(<SubLibrary>)"
    + "\\s+"
    + "(\\d+)"
    + "\\s+"
    + "(\\d+)"
    + "\\s+"
    + "(\\d{1,2}/\\d{1,2}/\\d{1,2})"
    + "\\s+"
    + "(\\d{1,2}:\\d{1,2})");
const RE_LINE3 = new RegExp(
/*
VSE Sublibraries

Member name
Records in the file
Library blocks in the file
Date the file was created
Time the file was created
Date of the last update
Time of the last update
File type: F (fixed) or S (string)
DATA=YES indicator: N or Y.A Y indicates that this member is a “.PROC.” It was either cataloged with LIBR with “DATA=YES” or added using FTP with the “SITE PROCDATA ON” command.

DFHFCTC2.PHASE  2088    3   11/02/23    15:16   11/02/23    15:36   SN
DFHRDTSP.PHASE   396    1   11/01/24    12:04                       SN
DFHTCTSP.PHASE  5544    6   11/01/24    11:35   11/01/24    12:04   SN
DTRTERM1.PHASE   140    1   11/01/24    12:04                       SN
DTRIIST.PROC      80    1   11/04/16    17:20   11/04/16    17:51   FN
DTRINNW.PROC      80    1   11/04/16    17:18   11/04/16    18:32   FN
DLM1.PROFDIT1    160    1   10/11/05    16:19                       FN
*/
"(\\S+)"
    + "\\s+"
    + "(\\d+)"
    + "\\s+"
    + "(\\d+)"
    + "\\s+"
    + "(\\d{1,2}/\\d{1,2}/\\d{1,2})"
    + "\\s+"
    + "(\\d{1,2}:\\d{1,2})"
    + "\\s+"
    + "(?:(\\d{1,2}/\\d{1,2}/\\d{1,2})?)"
    + "\\s+"
    + "(?:(\\d{1,2}:\\d{1,2})?)"
    + "\\s+"
    + "(\\S{1})"
    + "(\\S{1})");
const RE_LINE4 = new RegExp(
/*
POWER Files

Job name, job number, and job suffix (segment number) in one string. These subfields are separated by periods
Records in the file
Pages in the file
Lines in the file
Priority of the queue entry
Job disposition
Date and time the file was created in the queue

LPRTEST.08730.000   59  4    54  3   K   07/08/10    17:48
JRR20526.05663.000 168  6   168  3   D   05/26/11    18:41
*/
"(\\S+)"
    + "\\s+"
    + "(\\d+)"
    + "\\s+"
    + "(\\d+)"
    + "\\s+"
    + "(\\d+)"
    + "\\s+"
    + "(\\d+)"
    + "\\s+"
    + "(\\S+)"
    + "\\s+"
    + "(\\d{1,2}/\\d{1,2}/\\d{1,2})"
    + "\\s+"
    + "(\\d{1,2}:\\d{1,2})");
const RE_LINE5 = new RegExp(
/*
VSAM Catalogs

File name
Date the file was created
Time the file was created
Logical record length
File type:S (Sequential)D (BDAM)V (VSAM)I (ISAM)U (Undefined)

VSE.POWER.ACCOUNT.FILE              10/01/18    12:00   1024    D
VSESP.JOB.MANAGER.FILE              10/02/19    12:00   1024    S
Z9999994.VSAMDSPC.TAF9D957.TC570788 10/11/24    12:00   1024    V
*/
"(\\S+)"
    + "\\s+"
    + "(\\d{1,2}/\\d{1,2}/\\d{1,2})"
    + "\\s+"
    + "(\\d{1,2}:\\d{1,2})"
    + "\\s+"
    + "(\\d+)"
    + "\\s+"
    + "(.*)");
const RE_LINE6 = new RegExp(
/*
HFS Files

Date the file was created
Time the file was created
Bytes in the file
Record format: S (string), V (variable), F (fixed)
Record length in bytes
Data type: B (binary), E (EBCDIC), A (ASCII)
File or directory name

17/01/2010  12:12    <DIR>                   CSIVSEDW
*/
"(\\d{1,2}/\\d{1,2}/\\d{1,4})"
    + "\\s+"
    + "(\\d{1,2}:\\d{1,2})"
    + "\\s+" // separator
    + "(<DIR>)"
    + "\\s+"
    + "(.*)");
const RE_LINE7 = new RegExp(
//HFS continued
//23/02/2010  20:11    333,557 S   4096    B   COWBOYCLOSEUP.JPG
"(\\d{1,2}/\\d{1,2}/\\d{1,4})"
    + "\\s+"
    + "(\\d{1,2}:\\d{1,2})"
    + "\\s+" // separator
    + "([0-9,]+)"
    + "\\s+"
    + "(\\S+)"
    + "\\s+"
    + "(\\d+)"
    + "\\s+"
    + "(\\S+)"
    + "\\s+"
    + "(.*)");
/**
 * Returns true if a given line might be a MVS-style listing.
 *
  */
function testLine(line, ftp) {
    ftp.log("testLine: " + line);
    if (RE_LINE.test(line))
        return true;
    if (RE_LINE2.test(line))
        return true;
    if (RE_LINE3.test(line))
        return true;
    if (RE_LINE4.test(line))
        return true;
    if (RE_LINE5.test(line))
        return true;
    if (RE_LINE6.test(line))
        return true;
    return RE_LINE7.test(line);
}
exports.testLine = testLine;
/**
 * Parse a single line of a MVS-style directory listing.
 */
function parseLine(line, ftp) {
    ftp.log("parseLine: " + line);
    let groups = line.match(RE_LINE);
    if (groups === null) {
        groups = line.match(RE_LINE2);
        if (groups === null) {
            groups = line.match(RE_LINE3);
            if (groups === null) {
                groups = line.match(RE_LINE4);
                if (groups === null) {
                    groups = line.match(RE_LINE5);
                    if (groups === null) {
                        groups = line.match(RE_LINE6);
                        if (groups === null) {
                            groups = line.match(RE_LINE7);
                            if (groups === null) {
                                return undefined;
                            }
                        }
                    }
                }
            }
        }
    }
    ftp.log(groups);
    ftp.log("count: " + groups.length);
    let obj = {};
    if (groups.length == 3) {
        obj.Name = groups[1];
        obj["File Type"] = groups[2];
        if (groups[2].charAt(0) == '<')
            obj.type = "folder";
        else
            obj.type = "file";
    }
    else if (groups.length == 7) {
        obj.Name = groups[1];
        obj["File Type"] = groups[2];
        obj.Members = groups[3];
        obj.Blocks = groups[4];
        obj.Date = groups[5] + " " + groups[6];
        obj.type = "folder";
    }
    else if (groups.length == 10) {
        obj.Name = groups[1];
        obj.Records = groups[2];
        obj.Blocks = groups[3];
        obj.Created = groups[4] + " " + groups[5];
        if (groups[6])
            obj.Modified = groups[6] + " " + groups[7];
        else
            obj.Modified = "";
        obj["File Type"] = groups[8];
        obj.DATA = groups[9];
        obj.type = "file";
    }
    else if (groups.length == 9) {
        obj.Name = groups[1];
        obj.Records = groups[2];
        obj.Pages = groups[3];
        obj.Lines = groups[4];
        obj.Priority = groups[5];
        obj.Disposition = groups[6];
        obj.Created = groups[7] + " " + groups[8];
        obj.type = "file";
    }
    else if (groups.length == 6) {
        obj.Name = groups[1];
        obj.Created = groups[2] + " " + groups[3];
        obj.Lrecl = groups[4];
        obj["File Type"] = groups[5];
        obj.type = "file";
    }
    else if (groups.length == 5) {
        obj.Name = groups[4];
        obj.Size = groups[3];
        obj["Record Format"] = "";
        obj["Record Length"] = "";
        obj["Data Type"] = "";
        obj.Created = groups[1] + " " + groups[2];
        obj.type = "folder";
    }
    else if (groups.length == 8) {
        obj.Name = groups[7];
        obj.Size = groups[3];
        obj["Record Format"] = groups[4];
        obj["Record Length"] = groups[5];
        obj["Data Type"] = groups[6];
        obj.Created = groups[1] + " " + groups[2];
        obj.type = "file";
    }
    return obj;
}
exports.parseLine = parseLine;
function transformList(files) {
    return files;
}
exports.transformList = transformList;
