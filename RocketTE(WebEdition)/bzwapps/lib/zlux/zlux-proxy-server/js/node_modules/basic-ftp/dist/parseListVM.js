"use strict";
//import { FileInfo, FileType } from "./FileInfo"
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformList = exports.parseLine = exports.testLine = void 0;
//const JA_MONTH = "\u6708"
//const JA_DAY   = "\u65e5"
//const JA_YEAR  = "\u5e74"
const RE_LINE = new RegExp(
/*
//Also supports unix mode listings...

VM-format Lists
The VM-format list response provides file information in a format that — for the
minidisk and Shared File System (SFS) directory file groups — closely resembles
that produced by the CMS LISTFILE command

ENDTRACE  TCPIP    F   80   1   1 1999-07-28 12:24:01 TCM191
LASTING   GLOBALV  V   43  10   1 1999-11-16  9:05:22 TCM191
NOTRACE   TCPIP    F   80   1   1 1999-12-16 13:39:21 TCM191
OBEY      EXEC     V   72 153   2 1996-01-03 16:07:07 TCM191
PACKMODL  TESTFILE F 1024 468 117 1996-07-28 13:56:36 TCM191
PROFILE   EXEC     V   30  10   1 1999-11-16  9:01:10 TCM191
RECF80    TESTFILE F   80   5   1 2000-01-17 14:47:19 TCM191
SETX      XEDIT    V   46  13   1 1999-11-04  9:13:53 TCM191
TCPIP     DATA     V   72  99   2 1999-11-18 17:24:05 TCM191
TCPMNT2   NETLOG   V  108  48   2 2000-01-17 14:49:09 TCM191
TCPMNT2   SYNONYM  F   80  10   1 1999-11-10  8:46:12 TCM191
TCPSLVL   EXEC     V   37  23   1 1999-02-05 13:20:46 TCM191
*/
"(\\S+)"
    + "\\s+"
    + "(\\S+)"
    + "\\s+"
    + "(\\S+)"
    + "\\s+"
    + "(\\d+)"
    + "\\s+"
    + "(\\d+)"
    + "\\s+"
    + "(\\d+)"
    + "\\s+"
    + "(\\d{1,4}-\\d{1,2}-\\d{1,2})"
    + "\\s+"
    + "(\\d{1,2}:\\d{1,2}:\\d{1,2})"
    + "\\s+"
    + "(.*)");
const RE_LINE2 = new RegExp(
/*
For files and directories that are maintained using the z/VM Byte File System
(BFS), VM-format lists are identical to z/VM OPENVM LISTFILE responses.

05/20/2000 13:38:19  F  1   65758 'bfsline.cpy'
05/19/2000 11:02:15  F  1   65758 'bfsline.txt'
06/03/2000 12:27:48  F  1   15414 'bfstest.cpy'
05/20/2000 13:38:05  F  1   15414 'bfstest.output'
05/20/2000 13:38:42  F  1  772902 'bfswork.output'
03/31/2000 15:49:27  F  1  782444 'bfswork.txt'
05/20/2000 13:39:20  F  1   13930 'lotsonl.putdata'
05/19/2000 09:41:21  F  1   13930 'lotsonl.txt'
06/15/2000 09:29:25  F  1     278 'mail.maw'
05/20/2000 13:39:34  F  1     278 'mail.putdata'
05/20/2000 15:30:45  F  1   13930 'nls.new'
05/20/2000 14:02:24  F  1   13931 'nls.txt'
08/21/2000 10:03:17  F  1     328 'rock.rules'
05/20/2000 13:40:05  F  1      58 'testfil2.putdata'
04/26/2000 14:34:42  F  1      63 'testfil2.txt'
08/21/2000 05:28:40  D  -       - 'ALTERNATE'
12/28/2000 17:36:19  D  -       - 'FIRST'
*/
"(\\d{1,2}/\\d{1,2}/\\d{1,4})"
    + "\\s+"
    + "(\\d{1,2}:\\d{1,2}:\\d{1,2})"
    + "\\s+"
    + "(\\S+)"
    + "\\s+"
    + "(\\S+)"
    + "\\s+"
    + "(\\S+)"
    + "\\s+"
    + "(.*)");
const RE_LINE3 = new RegExp(
/*
For a z/VM virtual reader (RDR), list responses are similar to that produced by
the CP QUERY RDR ALL command, but with certain fields removed.

0013 SMTP    00000011 1999-11-03 12:46:10 CIBULAPR MAIL
0154 RSCS    00002789 1999-12-29 10:12:46 FL3XSAMP TXT
0116 TCPLVL2 00000170 1999-12-16 11:39:07 TCP-HELP LIST3820
0115 TCPLVL2 00002874 1999-12-16 11:39:06 TCP-OVER LIST3820
0153 RSCS    00002825 1999-06-29 10:12:45 FL32SAMP TXT
0214 SMTP    00000015 2000-01-14 12:50:10 CIBULAMA MAIL
*/
"(\\S+)"
    + "\\s+"
    + "(\\S+)"
    + "\\s+"
    + "(\\S+)"
    + "\\s+"
    + "(\\d{1,4}-\\d{1,2}-\\d{1,2})"
    + "\\s+"
    + "(\\d{1,2}:\\d{1,2}:\\d{1,2})"
    + "(?:\\s(\\S+))?"
    + "(?:\\s(\\S+))?");
/**
 * Returns true if a given line might be a MVS-style listing.
 *
  */
function testLine(line, ftp) {
    ftp.log("testLine: " + line);
    if (RE_LINE.test(line))
        return true;
    if (RE_LINE2.test(line))
        return true;
    return RE_LINE3.test(line);
}
exports.testLine = testLine;
/**
 * Parse a single line of a MVS-style directory listing.
 */
function parseLine(line, ftp) {
    ftp.log("parseLine: " + line);
    let groups = line.match(RE_LINE);
    if (groups === null) {
        groups = line.match(RE_LINE2);
        if (groups === null) {
            groups = line.match(RE_LINE3);
            if (groups === null) {
                return undefined;
            }
        }
    }
    ftp.log(groups);
    ftp.log("count: " + groups.length);
    let obj = {};
    if (groups.length == 10) {
        obj.Name = groups[1];
        obj["File Type"] = groups[2];
        obj.RECFM = groups[3];
        obj.LRECL = groups[4];
        obj.Records = groups[5];
        obj.Blocks = groups[6];
        obj.Date = groups[7] + " " + groups[8];
        obj.type = "file";
    }
    else if (groups.length == 7) {
        groups[6].replace("'", '');
        obj.Name = groups[6];
        //obj["File Type"] = groups[3]
        obj.Records = groups[5];
        obj.Date = groups[1] + " " + groups[2];
        if (groups[3] == 'D') {
            obj.type = "folder";
        }
        else {
            obj.type = "file";
        }
    }
    else if (groups.length == 8) {
        obj.Spoolid = groups[1];
        obj.Origin = groups[2];
        obj.Records = groups[3];
        obj.Date = groups[4] + " " + groups[5];
        if (typeof groups[6] !== 'undefined')
            obj.Name = groups[6];
        if (typeof groups[7] !== 'undefined')
            obj["File Type"] = groups[7];
        obj.type = "file";
    }
    return obj;
}
exports.parseLine = parseLine;
function transformList(files) {
    return files;
}
exports.transformList = transformList;
