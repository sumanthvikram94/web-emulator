export declare class Counter {
    name: string;
    keys: number[];
    values: number[];
    lastCount: number;
    bornAt: number;
    firstAt: number;
    lastAt: number;
    recording: boolean;
    constructor(name: string);
    destroy(): void;
    has(key: number): boolean;
    get(key: number): number;
    set(key: number, value: number): void;
    /**
     * increase the count number
     * @param pace : number to increase. can be positive or nagetive number.
     */
    increase(pace?: number): boolean;
    getName(): string;
    /**
     * Gets the count number at the given ts, or get the last count
     * @param ts
     */
    getCountAt(ts?: number): number;
    /**
     * Get the peak count during a time period
     * @param beginAt : timestamp
     * @param endAt : timestamp
     */
    getPeak(beginAt?: number, endAt?: number): number;
    /**
     * Calculate the average count during given period.
     * @param beginAt : Timestamp, defaults to 0
     * @param endAt : Timestamp, defaults to current timestamp
     *
     * Description:
     * Formula: y = (Î£ (record * duration)) / total_duration
     * Where:
     *  "record" stands for each count recorded.
     *  "duration" stands for milliseconds a count kept
     *  "total_duration" stands for millisecounds between the timestamp of calculation start and endAt./
     *  The "the timestamp of calculation start" is the max(beginAt, The 1st record timestamp). /
     *  In other words, the time before the 1st record is ignored.
     */
    getAvg(beginAt?: number, endAt?: number): number;
    /**
     * Cut the records with a given timestamp
     * @param cutAt : number
     */
    cut(cutAt?: number): {
        cutAt: number;
        cutKeys?: undefined;
        cutValues?: undefined;
    } | {
        cutAt: number;
        cutKeys: number[];
        cutValues: number[];
    };
    length(): number;
}
