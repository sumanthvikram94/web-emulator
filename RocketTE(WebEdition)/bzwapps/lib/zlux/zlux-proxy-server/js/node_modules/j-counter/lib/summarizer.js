"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Summarizer = void 0;
var _ = require("underscore");
var summary_1 = require("./summary");
var events_1 = require("events");
var DEFAULT_SUMMARY_INTERVAL = 600000; // 10 minutes
var MINIMUN_SUMMARY_INTERVAL = 60000;
var DEFAULT_KEEP_RECORDS = 24;
var MINIMUM_KEEP_RECORDS = 5;
var Summarizer = /** @class */ (function (_super) {
    __extends(Summarizer, _super);
    function Summarizer(counter, keepRecords) {
        var _this = _super.call(this) || this;
        _this.sumReducer = function (accumulator, currentValue) { return accumulator + currentValue; };
        // this.summaryInterval = Math.max(summaryInterval? summaryInterval: DEFAULT_SUMMARY_INTERVAL, MINIMUM_SUMMARY_INTERVAL);
        _this.counter = counter;
        _this.keepRecords = Math.max(keepRecords ? keepRecords : DEFAULT_KEEP_RECORDS, MINIMUM_KEEP_RECORDS);
        _this.summary = new Map();
        return _this;
    }
    Summarizer.prototype.trigger = function (interval) {
        this.sumaryLoop = setInterval(this.triggerSummarize.bind(this), Math.max(interval || DEFAULT_SUMMARY_INTERVAL, MINIMUN_SUMMARY_INTERVAL));
    };
    Summarizer.prototype.triggerSummarize = function () {
        this.emit('beforeSummarize', [this.summary]);
        var current = new Date();
        current.setMilliseconds(0);
        current.setSeconds(0);
        var curMin = current.getTime();
        current.setMinutes(0);
        var curHour = current.getTime();
        var prevHour = curHour - 3600000;
        var beginMin = 0;
        var length;
        if (this.summary.has(prevHour)) {
            length = this.getSummaryObj(prevHour).getLength();
            if (length < 60) {
                beginMin = prevHour + length * 1000;
                this.summarize(beginMin, curHour - 1000, prevHour);
            }
        }
        length = this.getSummaryObj(curHour).getLength();
        if (length < 60) {
            beginMin = curHour + length * 1000;
            this.summarize(beginMin, curMin, curHour);
        }
        this.prevCut = this.counter.cut(prevHour); // cut is save, because it will leave at least 1 record.
        this.clearRecords();
        this.emit('afterSummarize', this.summary);
    };
    Summarizer.prototype.clearRecords = function () {
        var _this = this;
        this.emit('beforeClear', [this.summary]);
        var keysArray = Array.from(this.summary.keys());
        if (keysArray.length > this.keepRecords) {
            var keysToDelete = keysArray.slice(0, -this.keepRecords);
            keysToDelete.forEach(function (key) {
                _this.summary.delete(key);
            });
        }
        this.emit('afterClear', [this.summary]);
    };
    Summarizer.prototype.summarize = function (beginMin, endMin, hour) {
        var summary = this.getSummaryObj(hour);
        for (var m = beginMin; m <= endMin; m = m + 60000) {
            var time = new Date(m);
            var minute = time.getMinutes();
            if (minute < summary.getLength())
                continue;
            var mpeak = this.counter.getPeak(m, m + 60000);
            var mavg = this.counter.getAvg(m, m + 60000);
            summary.setPeak(minute, mpeak);
            summary.setAvg(minute, mavg);
            this.emit('minuteSummary', { hour: hour, minute: minute, peak: mpeak, avg: mavg });
            if (minute === 59) {
                this.emit('hourSummary', this.getHourSummary(hour));
            }
            if (summary.getLength() >= 60)
                break;
        }
    };
    Summarizer.prototype.getHourSummary = function (hour) {
        var hourSummary = this.getSummaryObj(hour);
        var sum = hourSummary.avgs.reduce(this.sumReducer);
        var result = {
            hour: hour,
            peak: _.max(hourSummary.peaks),
            avg: sum / hourSummary.getLength(),
        };
        return result;
    };
    Summarizer.prototype.getSummaryObj = function (hour) {
        var sum = this.summary.get(hour);
        if (!sum) {
            sum = new summary_1.HourSummary(hour);
            this.summary.set(hour, sum);
        }
        return sum;
    };
    Summarizer.prototype.getSummary = function () {
        return this.summary;
    };
    Summarizer.prototype.destroy = function () {
        this.emit('beforeDestroy');
        clearInterval(this.sumaryLoop);
        delete this.sumaryLoop;
        delete this.summary;
        this.emit('afterDestroy');
    };
    return Summarizer;
}(events_1.EventEmitter));
exports.Summarizer = Summarizer;
//# sourceMappingURL=summarizer.js.map