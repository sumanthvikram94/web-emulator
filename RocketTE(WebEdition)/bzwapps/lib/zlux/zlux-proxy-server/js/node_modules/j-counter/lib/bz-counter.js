"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.BzCounter = void 0;
var counter_1 = require("./counter");
var util_1 = require("util");
var events_1 = require("events");
var summarizer_1 = require("./summarizer");
var _ = require("underscore");
var EXCEPTION_COUNTER_NOT_EXIST = 'The counter not exist';
var EXCEPTION_DELETE_DEFAULT_COUNTER = 'Can not delete the default counter';
// const enum Granularity {
//     DAY = 0,
//     HOUR,
//     MINUTE
// };
var BzCounter = /** @class */ (function (_super) {
    __extends(BzCounter, _super);
    // granularity: Granularity;
    function BzCounter() {
        var _this = _super.call(this) || this;
        _this.counters = new Map();
        _this.summarizers = new Map();
        _this.DEFAULT_NAME = '__DEFAULT_COUNTER__';
        _this.defaultCounter = new counter_1.Counter(_this.DEFAULT_NAME);
        _this.counters.set(_this.DEFAULT_NAME, _this.defaultCounter);
        return _this;
    }
    // setGranularity(granularity: number){
    //     this.granularity = granularity;
    // }
    BzCounter.prototype.getCounter = function (name) {
        var cName = name || this.DEFAULT_NAME;
        var c = this.counters.get(cName);
        if (c === undefined)
            throw { message: EXCEPTION_COUNTER_NOT_EXIST };
        return c;
    };
    BzCounter.prototype.createCounter = function (name) {
        if (this.counters.has(name)) {
            return this.counters.get(name);
        }
        var counter = new counter_1.Counter(name);
        this.counters.set(name, counter);
        return counter;
    };
    BzCounter.prototype.getLastCount = function (name) {
        var c = this.getCounter(name);
        return c.lastCount;
    };
    BzCounter.prototype.addOne = function (name) {
        var c = this.getCounter(name);
        c.increase();
        return true;
    };
    BzCounter.prototype.add = function (pace, name) {
        if (!util_1.isNumber(pace))
            return false;
        var c = this.getCounter(name);
        return c.increase(pace);
    };
    BzCounter.prototype.dropOne = function (name) {
        var c = this.getCounter(name);
        c.increase(-1);
    };
    BzCounter.prototype.drop = function (pace, name) {
        if (!util_1.isNumber(pace))
            return false;
        var c = this.getCounter(name);
        return c.increase(-pace);
    };
    BzCounter.prototype.getCountAt = function (ts, name) {
        var c = this.getCounter(name);
        return c.getCountAt(ts);
    };
    // //debug only
    // getKeys(name?: string){
    //     const c = this.getCounter(name);
    //     return c.keys;
    // }
    BzCounter.prototype.getLastAt = function () {
        var c = this.getCounter(name);
        return c.lastAt;
    };
    BzCounter.prototype.getPeak = function (begin, end, name) {
        var c = this.getCounter(name);
        return c.getPeak(begin, end);
    };
    BzCounter.prototype.getAvg = function (begin, end, name) {
        var c = this.getCounter(name);
        return c.getAvg(begin, end);
    };
    BzCounter.prototype.cut = function (cutAt, name) {
        var c = this.getCounter(name);
        return c.cut(cutAt);
    };
    BzCounter.prototype.triggerSummarizer = function (interval, name) {
        var cName = name || this.DEFAULT_NAME;
        var c = this.getCounter(cName);
        var s = this.summarizers.get(cName);
        if (!s) {
            s = new summarizer_1.Summarizer(c);
            s.trigger(interval);
            this.summarizers.set(cName, s);
        }
        return s;
    };
    BzCounter.prototype.getSummarizer = function (name) {
        var cName = name || this.DEFAULT_NAME;
        var s = this.summarizers.get(cName);
        if (s === undefined)
            throw { message: EXCEPTION_COUNTER_NOT_EXIST };
        return s;
    };
    // getSummary(name?: string){
    //     const cName = name || this.DEFAULT_NAME;
    //     const s = this.summarizers.get(cName);
    //     if (s === undefined) throw {message: EXCEPTION_COUNTER_NOT_EXIST};
    //     return s.getSummary();
    // }
    BzCounter.prototype.getMinutePeak = function (name) {
        var cName = name || this.DEFAULT_NAME;
        var summarizer = this.summarizers.get(cName);
        if (summarizer === undefined)
            throw { message: EXCEPTION_COUNTER_NOT_EXIST };
        var summary = summarizer.getSummary();
        var vals = summary.values();
        var element = vals.next();
        var result = [];
        while (!element.done) {
            var hourSummary = element.value;
            result.push({ hour: hourSummary.hour, peaks: hourSummary.peaks });
            element = vals.next();
        }
        return result;
    };
    BzCounter.prototype.getMinuteAvg = function (name) {
        var cName = name || this.DEFAULT_NAME;
        var summarizer = this.summarizers.get(cName);
        if (summarizer === undefined)
            throw { message: EXCEPTION_COUNTER_NOT_EXIST };
        var summary = summarizer.getSummary();
        var vals = summary.values();
        var element = vals.next();
        var result = [];
        while (!element.done) {
            var hourSummary = element.value;
            result.push({ hour: hourSummary.hour, avgs: hourSummary.avgs });
            element = vals.next();
        }
        return result;
    };
    BzCounter.prototype.getHourPeak = function (name) {
        var cName = name || this.DEFAULT_NAME;
        var summarizer = this.summarizers.get(cName);
        if (summarizer === undefined)
            throw { message: EXCEPTION_COUNTER_NOT_EXIST };
        var summary = summarizer.getSummary();
        var vals = summary.values();
        var element = vals.next();
        var result = [];
        while (!element.done) {
            var hourSummary = element.value;
            result.push({ hour: hourSummary.hour, peak: _.max(hourSummary.peaks) });
            element = vals.next();
        }
        return result;
    };
    BzCounter.prototype.getHourAvg = function (name) {
        var cName = name || this.DEFAULT_NAME;
        var summarizer = this.summarizers.get(cName);
        if (summarizer === undefined)
            throw { message: EXCEPTION_COUNTER_NOT_EXIST };
        var summary = summarizer.getSummary();
        var vals = summary.values();
        var element = vals.next();
        var result = [];
        while (!element.done) {
            var hourSummary = element.value;
            var sum = hourSummary.avgs.reduce(summarizer.sumReducer);
            result.push({ hour: hourSummary.hour, avg: sum / (hourSummary.getLength()) });
            element = vals.next();
        }
        return result;
    };
    BzCounter.prototype.deleteCounter = function (name) {
        if (name != this.DEFAULT_NAME) {
            var c = this.counters.get(name);
            if (c) {
                c.destroy();
                this.counters.delete(name);
            }
        }
        else {
            throw { message: EXCEPTION_DELETE_DEFAULT_COUNTER };
        }
        var s = this.summarizers.get(name);
        if (s) {
            s.destroy();
            this.summarizers.delete(name);
        }
    };
    BzCounter.prototype.destroyAll = function () {
        this.counters.forEach(function (c) {
            c.destroy();
        });
        this.summarizers.forEach(function (s) {
            s.destroy();
        });
    };
    BzCounter.prototype.pause = function (name) {
        var c = this.getCounter(name);
        c.recording = false;
    };
    BzCounter.prototype.resume = function (name) {
        var c = this.getCounter(name);
        c.recording = true;
    };
    return BzCounter;
}(events_1.EventEmitter));
exports.BzCounter = BzCounter;
//# sourceMappingURL=bz-counter.js.map