import { ISampler } from '../sampler/sampler';

interface IBenchmarkConfig {
    benchmarkFunc: (data: object | undefined) => boolean,
    callback: (data: object | undefined) => void
}

interface ISamplerConfig {
    name: string,
    sampler?: ISampler,
    interval?: number,
    benchmarks?: IBenchmarkConfig[]
}

export class PerfTracker {

    _intervals: Map<string, any>;
    _samplerConfig: Map<string, ISamplerConfig>;

    constructor() {
        this._intervals = new Map();
        this._samplerConfig = new Map();
    }

    addSampler(name: string, sampler: ISampler, interval?: number) {
        if (!sampler.isAvailable()) {
            console.warn('Performance sampler ' + name + ' is not available.');
            return;
        }
        let samplerConfig = this._samplerConfig.get(name);
        if (!samplerConfig) {
            samplerConfig = {
                name,
                sampler,
                interval
            }
            this._samplerConfig.set(name, samplerConfig);
        } else {
            samplerConfig.sampler = sampler;
            samplerConfig.interval = interval;
        }
    }

    addBenchmark(samplerName: string, benchmarkFunc: (data: object | undefined) => boolean, callback: (data: object | undefined) => void) {
        let samplerConfig = this._samplerConfig.get(samplerName);
        if (!samplerConfig) {
            samplerConfig = {
                name: samplerName
            }
            this._samplerConfig.set(samplerName, samplerConfig);
        }
        let benchmarks = samplerConfig.benchmarks
        if (!benchmarks) {
            benchmarks = [];
            samplerConfig.benchmarks = benchmarks;
        }
        benchmarks.push({
            benchmarkFunc,
            callback
        })
    }

    startSampler(name: string): void {
        if (this._intervals.has(name)) {
            return;
        }

        let samplerConfig = this._samplerConfig.get(name);
        if (!samplerConfig || !samplerConfig.sampler) {
            return;
        }
        let interval = (samplerConfig?.interval) ? samplerConfig.interval : 60000 // default to 1 min.
        const intervalObj = setInterval (() => {
            const sampler = samplerConfig!.sampler!;
            sampler.sampleFunc();
            const data = sampler.sampleData;
            const benchmarks = samplerConfig?.benchmarks;
            if (benchmarks && benchmarks.length > 0) {
                for (const benchmark of benchmarks) {
                    const benchmarkFunc = benchmark.benchmarkFunc;
                    const callback = benchmark.callback;
                    if (benchmarkFunc(data) === true) {
                        callback(data)
                    }
                }
            }
        }, interval);
        this._intervals.set(name, intervalObj);
    }

    stopSampler(name: string) {
        if (!this._intervals.has(name)) {
            return;
        }

        const intervalObj = this._intervals.get(name);
        clearInterval(intervalObj);

        this._intervals.delete(name);
    }

}