import { ISampler } from '../sampler/sampler';
interface IBenchmarkConfig {
    benchmarkFunc: (data: object | undefined) => boolean;
    callback: (data: object | undefined) => void;
}
interface ISamplerConfig {
    name: string;
    sampler?: ISampler;
    interval?: number;
    benchmarks?: IBenchmarkConfig[];
}
export declare class PerfTracker {
    _intervals: Map<string, any>;
    _samplerConfig: Map<string, ISamplerConfig>;
    constructor();
    addSampler(name: string, sampler: ISampler, interval?: number): void;
    addBenchmark(samplerName: string, benchmarkFunc: (data: object | undefined) => boolean, callback: (data: object | undefined) => void): void;
    startSampler(name: string): void;
    stopSampler(name: string): void;
}
export {};
