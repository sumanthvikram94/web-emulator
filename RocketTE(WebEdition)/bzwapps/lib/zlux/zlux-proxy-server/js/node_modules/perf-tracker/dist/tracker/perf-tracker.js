"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PerfTracker = void 0;
class PerfTracker {
    constructor() {
        this._intervals = new Map();
        this._samplerConfig = new Map();
    }
    addSampler(name, sampler, interval) {
        if (!sampler.isAvailable()) {
            console.warn('Performance sampler ' + name + ' is not available.');
            return;
        }
        let samplerConfig = this._samplerConfig.get(name);
        if (!samplerConfig) {
            samplerConfig = {
                name,
                sampler,
                interval
            };
            this._samplerConfig.set(name, samplerConfig);
        }
        else {
            samplerConfig.sampler = sampler;
            samplerConfig.interval = interval;
        }
    }
    addBenchmark(samplerName, benchmarkFunc, callback) {
        let samplerConfig = this._samplerConfig.get(samplerName);
        if (!samplerConfig) {
            samplerConfig = {
                name: samplerName
            };
            this._samplerConfig.set(samplerName, samplerConfig);
        }
        let benchmarks = samplerConfig.benchmarks;
        if (!benchmarks) {
            benchmarks = [];
            samplerConfig.benchmarks = benchmarks;
        }
        benchmarks.push({
            benchmarkFunc,
            callback
        });
    }
    startSampler(name) {
        if (this._intervals.has(name)) {
            return;
        }
        let samplerConfig = this._samplerConfig.get(name);
        if (!samplerConfig || !samplerConfig.sampler) {
            return;
        }
        let interval = (samplerConfig === null || samplerConfig === void 0 ? void 0 : samplerConfig.interval) ? samplerConfig.interval : 60000; // default to 1 min.
        const intervalObj = setInterval(() => {
            const sampler = samplerConfig.sampler;
            sampler.sampleFunc();
            const data = sampler.sampleData;
            const benchmarks = samplerConfig === null || samplerConfig === void 0 ? void 0 : samplerConfig.benchmarks;
            if (benchmarks && benchmarks.length > 0) {
                for (const benchmark of benchmarks) {
                    const benchmarkFunc = benchmark.benchmarkFunc;
                    const callback = benchmark.callback;
                    if (benchmarkFunc(data) === true) {
                        callback(data);
                    }
                }
            }
        }, interval);
        this._intervals.set(name, intervalObj);
    }
    stopSampler(name) {
        if (!this._intervals.has(name)) {
            return;
        }
        const intervalObj = this._intervals.get(name);
        clearInterval(intervalObj);
        this._intervals.delete(name);
    }
}
exports.PerfTracker = PerfTracker;
