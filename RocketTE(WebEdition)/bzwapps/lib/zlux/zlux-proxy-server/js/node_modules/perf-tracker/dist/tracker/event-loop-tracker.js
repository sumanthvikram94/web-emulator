"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventLoopTracker = exports.EluEvents = void 0;
const index_1 = require("../index");
const events_1 = require("events");
exports.EluEvents = {
    BUSY: 'busy',
    NOTBUSY: 'notBusy',
    CRAZY: 'crazy',
    NOTCRAZY: 'notCrazy',
    BELOW_10: '<10',
    ABOVE_10: '>=10',
    BELOW_30: '<30',
    ABOVE_30: '>=30',
    BELOW_50: '<50',
    ABOVE_50: '>=50',
    BELOW_70: '<70',
    ABOVE_70: '>=70',
    BELOW_90: '<90',
    ABOVE_90: '>=90',
    SAMPLE: 'sample'
};
const ELU_NAME = 'elu';
/**
 * Event loop utilization tracker
 */
class EventLoopTracker extends events_1.EventEmitter {
    constructor(config = {
        busy: 0.3,
        crazy: 0.9,
        doTrackPercent: true,
        doEmitAll: false,
        interval: 30000
    }) {
        super();
        this.isAbove10 = false;
        this.isAbove30 = false;
        this.isAbove50 = false;
        this.isAbove70 = false;
        // public isAbove80: boolean = false;
        this.isAbove90 = false;
        this.isBusy = false;
        this.isCrazy = false;
        this.config = config;
        const eluTracker = new index_1.PerfTracker();
        eluTracker.addSampler(ELU_NAME, new index_1.EventLoopSampler(), this.config.interval);
        eluTracker.addBenchmark(ELU_NAME, (data) => {
            if (data === undefined) {
                return false;
            }
            const elu = data;
            if (elu.utilization !== undefined) {
                const eu = elu.utilization;
                this.setBusy(eu);
                this.setPercent(eu);
                this.emitSample(elu);
            }
            return false;
        }, () => {
            // The logics are covered in benchmarkFunc, so doing nothing here.
        });
        eluTracker.startSampler(ELU_NAME);
        this.eluTracker = eluTracker;
    }
    stop() {
        this.eluTracker.stopSampler(ELU_NAME);
    }
    emitSample(elu) {
        if (this.config.doEmitAll) {
            this.emit(exports.EluEvents.SAMPLE, elu);
        }
    }
    setBusy(eu) {
        if (eu >= this.config.busy) {
            if (!this.isBusy) {
                this.isBusy = true;
                this.emit(exports.EluEvents.BUSY, eu);
            }
        }
        else {
            if (this.isBusy) {
                this.isBusy = false;
                this.emit(exports.EluEvents.NOTBUSY, eu);
            }
        }
        if (eu >= this.config.crazy) {
            if (!this.isCrazy) {
                this.isCrazy = true;
                this.emit(exports.EluEvents.CRAZY, eu);
            }
        }
        else {
            if (this.isCrazy) {
                this.isCrazy = false;
                this.emit(exports.EluEvents.NOTCRAZY, eu);
            }
        }
    }
    setPercent(eu) {
        if (!this.config.doTrackPercent) {
            return;
        }
        if (eu >= 0.1) {
            if (!this.isAbove10) {
                this.isAbove10 = true;
                this.emit(exports.EluEvents.ABOVE_10, eu);
            }
        }
        else {
            if (this.isAbove10) {
                this.isAbove10 = false;
                this.emit(exports.EluEvents.BELOW_10, eu);
            }
        }
        if (eu >= 0.3) {
            if (!this.isAbove30) {
                this.isAbove30 = true;
                this.emit(exports.EluEvents.ABOVE_30, eu);
            }
        }
        else {
            if (this.isAbove30) {
                this.isAbove30 = false;
                this.emit(exports.EluEvents.BELOW_30, eu);
            }
        }
        if (eu >= 0.5) {
            if (!this.isAbove50) {
                this.isAbove50 = true;
                this.emit(exports.EluEvents.ABOVE_50, eu);
            }
        }
        else {
            if (this.isAbove50) {
                this.isAbove50 = false;
                this.emit(exports.EluEvents.BELOW_50, eu);
            }
        }
        if (eu >= 0.7) {
            if (!this.isAbove70) {
                this.isAbove70 = true;
                this.emit(exports.EluEvents.ABOVE_70, eu);
            }
        }
        else {
            if (this.isAbove70) {
                this.isAbove70 = false;
                this.emit(exports.EluEvents.BELOW_70, eu);
            }
        }
        if (eu >= 0.9) {
            if (!this.isAbove90) {
                this.isAbove90 = true;
                this.emit(exports.EluEvents.ABOVE_90, eu);
            }
        }
        else {
            if (this.isAbove90) {
                this.isAbove90 = false;
                this.emit(exports.EluEvents.BELOW_90, eu);
            }
        }
    }
}
exports.EventLoopTracker = EventLoopTracker;
