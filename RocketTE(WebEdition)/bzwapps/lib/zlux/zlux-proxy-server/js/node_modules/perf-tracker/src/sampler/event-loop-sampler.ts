import { ISampler } from './sampler';
import { EventLoopUtilization, performance } from 'perf_hooks';

export class EventLoopSampler implements ISampler {

    public sampleFunc: ()=> void
    public sampleData: EventLoopUtilization | undefined
    private _lastElu: EventLoopUtilization | undefined

    constructor() {
        this.sampleData = undefined;
        this.sampleFunc = () => {
            if (!this.isAvailable()) {
                return;
            }
            if (this._lastElu === undefined) {
                this._lastElu = performance.eventLoopUtilization();
                this.sampleData = this._lastElu;
            } else {
                const elu = performance.eventLoopUtilization(this._lastElu);
                this.sampleData = elu
                this._lastElu = performance.eventLoopUtilization();
            }
        };
    }

    onSample(callback: Function) {
        callback(this.sampleData);
    }

    isAvailable() {
        return performance.eventLoopUtilization !== undefined;
    }

}