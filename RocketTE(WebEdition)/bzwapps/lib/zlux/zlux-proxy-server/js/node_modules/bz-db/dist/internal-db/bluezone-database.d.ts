/**
 * Author:    Jerry Gao (jgao@rocketsoftware.com)
 * Create DT: 2020-01-01
 * Desc:      A simple node.js native database
 */
/// <reference types="node" />
import fse from 'fs-extra';
import { FileService } from '../services/files.service.js';
import { DataEntityMetadata, DatabaseMetadata, DataStrategy, SchemaType, TxnOps } from '../main/metadata.js';
import Queue from 'better-queue';
import { DataEntity, ChangeStatus, DEStatistics, DEPartitions } from './data-entity.js';
import { InternalDatabaseInterface } from '../main/db-interface';
import { ILoggerConfig, ILogger } from '../services/index.js';
declare const _logger: unique symbol;
declare const _dataEntities: unique symbol;
declare const _util: unique symbol;
declare const _queue: unique symbol;
declare const _execQueue: unique symbol;
declare const _databaseMetadata: unique symbol;
declare const _dataEntityMetadata: unique symbol;
declare const _basePath: unique symbol;
declare const _resolveLoadReady: unique symbol;
declare const _promLoadReady: unique symbol;
declare const _dataStrategy: unique symbol;
declare const _changedDataEntities: unique symbol;
declare const _promsReload: unique symbol;
declare const _watchedPaths: unique symbol;
declare const _deAnalysisCache: unique symbol;
declare class BlueZoneDatabase implements InternalDatabaseInterface {
    [_dataEntities]: any;
    [_logger]: ILogger;
    [_util]: FileService;
    [_queue]: Queue;
    [_execQueue]: Queue;
    [_databaseMetadata]: DatabaseMetadata;
    [_dataEntityMetadata]: Map<string, DataEntityMetadata>;
    [_basePath]: string;
    [_resolveLoadReady]: (value?: any) => void;
    [_promLoadReady]: Promise<any>;
    [_promsReload]: Promise<any>[];
    [_dataStrategy]: DataStrategy;
    [_changedDataEntities]: Map<string, ChangeStatus>;
    [_watchedPaths]: Map<string, fse.Stats>;
    [_deAnalysisCache]: Map<string, DEStatistics>;
    name: string;
    constructor(databaseMetadata: DatabaseMetadata, processName?: string);
    /**
     * Private functions
     */
    private _injectInternalDEs;
    /**
     * Creates the queue for file system operation
     */
    private _createQueue;
    /**
     * Writes a file
     * @param option : Object includes {path: file path, data: file content}
     * @param isIni
     */
    private _addFile;
    /**
     * Deletes a file
     * @param path : file path
     */
    private _deleteFile;
    /**
     * deletes a dir and all dirs and files in it
     * @param path dir path
     */
    private _deleteDir;
    /**
     * Sends file content to a restful API
     * @param option : Object includes {url, method, headers, body}
     */
    /**
     * Creates the queue for file system operation
     */
    private _createExecQueue;
    /**
     * Initiate a file system operation
     * @param option : Object includes {type: add|delete|sync|deleteDir, option}
     */
    private _execInQueue;
    /**
     * Initiate a file system operation
     * @param option : Object includes {type: add|delete|sync|deleteDir, option}
     */
    private _addQueue;
    /**
     * Creates the dir and the parent dirs if not exist.
     * @param {string} dirpath
     */
    private _createDirsSync;
    /**
     * Output to log on INFO level
     * @param log
     */
    private _logInfo;
    private _logWarn;
    private _logSevere;
    private _logDebug;
    private _getStoragePath;
    private _getStorageFullPath;
    private _loadDataEntitys;
    private _initDataObject;
    private _deleteKeyValueFromObj;
    /**
     *
     * @param deObj
     * @param keyPath string. Should be like 'user.userid'
     */
    private _getDeepKeyValueStr;
    private _setDeepKeyValueStr;
    private _deletePKValue;
    private _getPKValue;
    private _getCombFieldsValue;
    private _loadPartitions;
    private _buildIndexes;
    private _loadValues;
    _replaceDE(dataEntityName: string, newDataEntity: DataEntity): void;
    /**
     * Loads data from file into memory for a given data entity
     * @param metadata
     * @param isRefresh - Whether it's loading while db starts or it's a reload. The action will be different.
     * @param partitions - In multi-process mode, one process only manage part of the partitions.
     */
    private _manage;
    private _getMatchedIndex;
    /**
     *
     * @param filter
     * @param pks
     * @returns boolean, whether the filter keys includes the primaryKeys
     */
    private _arrayIncludes;
    private _arrayMinus;
    private _searchDeepKeysArr;
    private _getSubObj;
    /**
     *
     * @param dataEntity
     * @param filter , this should be an object like: {userId: ['a', 'b', 'c'], sessionId: 's1'} or {userId: 'a', sessionId: 's1'}
    */
    private _filter;
    /**
     *
     * @param dataEntity
     * @param filter , this should be an object like: {userId: 'a', sessionId: 's1'}
     */
    private _filterByOneRecord;
    private _deleteAll;
    /**
     * This will delete the data, keys, values. But not including indexes.
     * @param dataEntity
     * @param pkVal
     */
    private _deleteDKVByPk;
    private _deleteFromIndexes;
    private _persistDelete;
    private _deleteByFilter;
    private _getPathFromPK;
    private _getFileNameFromMeta;
    private _insertIndexes;
    /**
     * transform the field value to lowercase for ignore case constraint
     * @param metadata
     * @param value
     */
    private _constraintIgnoreCaseFields;
    private _insert;
    private _isAnyPKColIncluded;
    private _isAllPKColIncluded;
    private _genStrHashcode;
    private _genPersistFileObj;
    /**
     * Moved to files.service.ts
     * Returns the path of a given file, or returns the path itself if given a path.
     * @param filePath
     */
    private _handleFileChange;
    /**
     * Watches for data changes, and refresh the data in memory accordingly.
     * @param filePath
     * @param metadata
     * @param isWatchParent Boolean. True to watch the parent dir of the given filePath. False to watch the given filePath.
     */
    private _watchPath;
    private _persistRead;
    private _getString;
    private _calSinglePartNum;
    private _calAllPartNums;
    private _calFilterParitions;
    private _persistReadNoPKData;
    private _readSignleFile;
    _mergeFilterIntoMetaData(metadata: DataEntityMetadata, filter?: Object): DataEntityMetadata;
    private _persistSave;
    private _bulkLoadPersistPartition;
    private _bulkLoadPersistFileList;
    private _bulkLoadOnlyMemory;
    private _bulkLoad;
    private _isLockExist;
    _obtainResourceLock(dataEntityName: string, times?: number): Promise<any>;
    _releaseResourceLock(dataEntityName: string): Promise<any>;
    private _updateOrInsert;
    private _update;
    /**
     * Public functions
     */
    /**
     * Data query function in synchronize mode. This function should NOT be used when process pooling is enabled
     * @param dataEntityName Name of data entity
     * @param filter An object includes filter field name and value, e.g. {userId: 'a', sessionName: 's1'}
     */
    selectSync(dataEntityName: string, filter?: Object, options?: Object): any;
    /**
     * Data query.
     *
     * @param dataEntityName Name of data entity
     * @param filter Optional. An object includes filter field name and value, e.g. {userId: 'a', sessionName: 's1'}
     * @param options Optional. An object includes options:
     * @param options.ignoreCaseFields Optional. An array of field names used as filter. The query on these fields will ignore case
     * @param options.orderBy Optional. Defines the orderBy rules.
     * @param options.orderBy.fields An array of field names to order by on
     * @param options.orderBy.orders An array of order ('asc' or 'desc'). The value index should match to the fields
     * @param options.pagination Optional. If you want BZDB to do pagination
     * @param options.pagination.page The page number
     * @param options.pagination.size Page size
     *
     * @returns Promise<any>
     * @returns {dataEntityName} String. Name of data entity
     * @returns {data} Array. Contains returned data
     * @returns {rowCount} Number. Row count of data returned
     * @returns {total} Number. When pagination, total is the total row count of the filter result
     * @returns {page} Number. When pagination, page number
     * @returns {pageSize} Number. When pagination, size of page
     * @returns {totalPages} Number. When pagination, count of pages
     */
    select(dataEntityName: string, filter?: Object, options?: Object): Promise<any>;
    /***
     * this function is designed to read all files from a folder and these files in this folder have different structure.
     * the return result like below
     *
     * {
     *    dataEntityName: 'dataEntityName',
     *    rowCount: 2,
     *    data: [
     *           {
     *               fileName:'xxx.json',
     *               data:{
     *                    name: 'aaaa',
     *                    type: 'atype'
     *               }
     *           },
     *           {
     *               fileName:'yyy.json',
     *               data:{
     *                    name: 'bbbb',
     *                    groupName:'test'
     *               }
     *           }
     *       ]
     *  }
     *
     */
    selectNoPKData(dataEntityName: string): Promise<any>;
    /**
     * Fully query the data entity and return the data in partitions (files).
     * @param dataEntityName
     * @returns
     */
    partitions(dataEntityName: string): Promise<DEPartitions>;
    writePartitions(parts: DEPartitions): Promise<any>;
    /**
     * Fully overwrite data entity from partitions
     * @param parts
     * @returns
     */
    private _doWritePartitions;
    delete(dataEntityName: string, filter?: any, options?: TxnOps): Promise<any>;
    /**
     * Addes data refreshing into wait ready status.
     */
    private _statusReady;
    private _execDelete;
    /**
     *
     * @param dataEntityName
     * @param value
     */
    insert(dataEntityName: string, value: any, options?: TxnOps): Promise<any>;
    /**
     *
     * @param dataEntityName
     * @param value
     */
    private _execInsert;
    /**
     *
     * @param dataEntityName
     * @param filter
     * @param value
     * @param constraints
     */
    update(dataEntityName: string, filter: any, value: any, options?: TxnOps): Promise<any>;
    private _execUpdate;
    /**
     *
     * @param dataEntityName
     * @param value
     */
    updateOrInsert(dataEntityName: any, value: any, options?: TxnOps): Promise<any>;
    private _execUpdateOrInsert;
    bulkLoad(dataEntityName: string, values: any[], options?: TxnOps): Promise<any>;
    private _execBulkLoad;
    /**
     * When data file changed by other process or so, the data in memory needs a reload
     * @param dataEntityName
     * @param values
     * @param constraint
     */
    private _execWatchEvent;
    /**
     * WebDeployment is using this for upgrading.
     * @param dataEntityName
     */
    refreshDataEntity(dataEntityName: string): Promise<any>;
    search(): any;
    getName(): string;
    waitLoadReady(): Promise<any>;
    changeLogger(config: ILoggerConfig): void;
    private _selectFromCache;
    /**
     *
     * @param dataEntityName
     * @param isIncludeRows Includes statistics for each row.
     * @param isDoHash Includes a hash of the row value into the row hash
     * @returns
     */
    analyzeDataEntity(dataEntityName: string, isIncludeRows?: boolean, isDoHash?: boolean): Promise<DEStatistics>;
    /**
     *
     * @param dataEntityName
     * @returns
     */
    count(dataEntityName: string): Promise<any>;
    private _appendExtend;
    private _appendExtendEntity;
    private _loadEntity;
    private _releaseEntity;
    create(type: SchemaType, value: object, options?: TxnOps): Promise<any>;
    drop(type: SchemaType, entityName: string, options?: TxnOps): Promise<{
        status: boolean;
        message: string;
    }>;
}
export { BlueZoneDatabase };
