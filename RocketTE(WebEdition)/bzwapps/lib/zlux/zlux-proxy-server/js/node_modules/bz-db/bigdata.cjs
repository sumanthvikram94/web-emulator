const BZDB = require('./dist');
const logConfig = {
    type: process.env.BZ_LOGGER_TYPE,
    logLevel: 1 // 0-SEVERE, 1-WARN, 2-INFO, 3-DEBUG
}
const metadata = {
    storePath: './profiedata/',
    processPooling: 0, // Multi-process can be controlled by ENV variable now.
    logging: logConfig,
    // enableWorkerThread: true,
    dataEntities: [
        {
            name: 'userInfo',
            primaryKeys: ['userId']
        },
        {
            name: 'userLogin',
            primaryKeys: ['username']
        },
        {
            name: 'keyboardMappingPrivate',
            primaryKeys: ['userId', 'id'],
            indexes: {userId: ['userId']}
        },
        {
            name: 'hotspotPrivate',
            primaryKeys: ['userId', 'id'],
            indexes: {userId: ['userId']}
        },
        {
            name: 'launchpadPrivate',
            primaryKeys: ['userId', 'id'],
            indexes: {userId: ['userId']}
        },
        {
            name: 'preferencePrivate',
            primaryKeys: ['userId', 'id'],
            indexes: {userId: ['userId']}
        },
        {
            name: 'userLanguage',
            primaryKeys: ['id']
        }
    ]
};

const ROW_COUNT = 50000

const bzdb = BZDB.loadDatabase(new BZDB.DatabaseMetadata(metadata));
bzdb.waitLoadReady().then(async () => {
    // const batchTxnData1 = [
    //     {dataEntityName:'testde', action:'DELETE'},
    //     {dataEntityName:'testde', action:'INSERT', value:{id: '1', name: 'Jimmy'}},
    //     {dataEntityName:'testde', action:'INSERT', value:{id: '2', name: 'Jerry'}},
    //     {dataEntityName:'testde', action:'UPDATEORINSERT', value:{id: '3', name: 'Nancy'}},
    //     {dataEntityName:'testde', action:'UPDATEORINSERT', value:{id: '1', name: 'Tom'}},
    //     {dataEntityName:'testde', action:'UPDATEORINSERT', value:{id: '4', name: 'Jimmy'}},
    //     {dataEntityName:'testde', action:'DELETE', value:{}, options:{filter:{id: '4'}}}
    // ]
    await bzdb.delete('userInfo')
    await bzdb.delete('userLogin')
    const dataUserInfo = []
    const dataUserLogin = []
    console.log('Data preparison starts: ' + new Date().toString())
    for (let i = 0; i < ROW_COUNT; i ++){
        const uid = bzdb.getUIDSync()
        dataUserInfo.push({
            timeStamp:1628232738578,
            userId: uid,
            userName:'User ' + i,
            mail:'user1@rocketsoftware.com',
            phone:'',
            groupNames:['8zdew1-4-1r-euo-g2'],
            LU1:'',LU2:'',LU3:'',LU4:'',LU5:'',LU6:'',LU7:'',LU8:'',LU9:'',LU10:'',LU11:'',LU12:'',LU13:'',LU14:'',LU15:'',LU16:'',LU17:'',LU18:'',LU19:'',LU20:'',LU21:'',LU22:'',LU23:'',LU24:'',LU25:'',LU26:'',LU27:'',LU28:'',LU29:'',LU30:'',LU31:'',LU32:'',
            timestamp:1628232745086
        })
        dataUserLogin.push({
            timeStamp:1628232738578,
            username:uid,
            authentication:'d588e70df1aafecad03bc6c35cb46fda',
            iv:'68621efa092d2f3b65401f38d6d62c662d996b6d1e4fa811ab4accdd7d12dc4c',
            salt:'2ff0f26c7e14eae87af9a3252496eac4839c4310680ca1cee3205a60ef27bbde',
            timestamp:1628232744865
        })
        
    }
    console.log('userInfo bulkload starts: ' + new Date().toString())
    const rsUI = await bzdb.bulkLoad('userInfo', dataUserInfo)
    console.log(rsUI)
    console.log('userLogin bulkload starts: ' + new Date().toString())
    const rsUL = await bzdb.bulkLoad('userLogin', dataUserLogin)
    console.log(rsUL)
})