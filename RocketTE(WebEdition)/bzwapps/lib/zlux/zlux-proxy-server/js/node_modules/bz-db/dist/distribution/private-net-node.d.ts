import { Libp2p } from 'libp2p';
import { INodeMetaExtended, IPeerMeta, NodeMetadata } from './node-metadata.js';
import { NodeMsgHandler } from './node-msg-handler.js';
import { PrivateNet } from './private-net.js';
import { DbWorker } from '../main/db-worker.js';
import { MetaCluster } from '../main/metadata.js';
/**
 * Node of cluster in private net
 */
declare class PrivateNetNode {
    _node: Libp2p;
    _meta: INodeMetaExtended;
    _nodeMeta: NodeMetadata;
    _msgHandler: NodeMsgHandler;
    _worker: DbWorker;
    _net: PrivateNet;
    _listening: boolean;
    _port: number;
    _doStart: boolean;
    _metaCluster: MetaCluster;
    _startProm: Promise<any>;
    _startPromResolve: Function;
    constructor(worker: DbWorker, net: PrivateNet);
    /**
     * Selects the meta_node
     * @returns Stored node metadata if exist. Otherwise null.
     */
    private getNodeMeta;
    /**
     * Selects the meta_peer
     * @returns Stored peer metadata of local node if exist. Otherwise null.
     */
    private getPeerMeta;
    /**
     * Loads the stored meta_node and meta_peer
     * @returns true if meta_node data exists
     */
    private loadStoredMetadata;
    /**
     * Replaces the IP address in localAddrs if configured.
     * @returns true if the replacement is done
     */
    private replaceHostIp;
    /**
     * Saves the generated cluster metadata for the 1st time start
     */
    private saveClusterMetadata;
    updateNodeMetadata(): Promise<void>;
    /**
     * Starts the local node
     */
    start(): Promise<void>;
    configPeerDiscovery(libp2pConfig: any): void;
    waitForClusterNodeStart(): Promise<any>;
    isListening(): boolean;
    get metadata(): INodeMetaExtended;
    stop(): Promise<void>;
    getMetaConfig(): any;
    getPeerInfo(): IPeerMeta;
    dial(peerMeta: NodeMetadata): Promise<void>;
    getMsgHandler(): NodeMsgHandler;
    getAddrs(): Promise<string[]>;
}
export { PrivateNetNode };
