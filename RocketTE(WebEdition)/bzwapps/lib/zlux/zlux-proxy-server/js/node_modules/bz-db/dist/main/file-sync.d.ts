import Queue from 'better-queue';
export interface FileSyncInfo {
    abs_path: string;
    relative_path: string;
    size: number;
    mtime: string;
    removed: boolean;
    timestamp?: number;
    _fsi_realSize4Check?: number;
}
export declare enum FileSyncMsgType {
    FST_SEND_FILE = 1,
    FST_PULL_DONE = 2
}
export interface FileSyncMsg {
    type: FileSyncMsgType;
    taskId: string;
    error: string;
    fsi: FileSyncInfo;
}
export interface FileSyncTask {
    peerId: string;
    fsm: FileSyncMsg;
}
export declare class FileSync {
    _basePath: string;
    _queue: Queue;
    _textDecoder: TextDecoder;
    constructor(basePath: string, runTask: Function);
    pushSendTask(task: FileSyncTask): void;
    getFileSyncInfo(filePath: string, isSync4Add?: boolean): FileSyncInfo;
    static isFileSyncMsg(obj: any): obj is FileSyncMsg;
    static isFileSyncInfo(obj: any): obj is FileSyncInfo;
    getFileSyncMsg4SendFile(fsi: FileSyncInfo, isPullAll?: boolean): FileSyncMsg;
    getFileSyncMsg4PullAll(taskId: string): FileSyncMsg;
    static getFileSize(filePath: string): number;
    static getRealFileState(baseDir: string, obj: any): string;
    /**
     * convert number (0 - 65535) to hex string (length = 4)
     * @param val
     * example:
     *    -1 => "0000"
     *     0 => "0000"
     *    32 => "0020"
     * 65535 => "FFFF"
     * 65536 => "0000"
     */
    private numToHexString;
    deleteFile(val: FileSyncInfo): void;
    getFileReadStream(taskId: string, val: FileSyncInfo): any;
    writeFileFromStream(source: any): Promise<void>;
}
