/// <reference types="node" />
import { EventEmitter } from 'events';
import { Workflow } from './workflow.js';
declare enum TaskStatus {
    NOT_STARTED = 0,
    READY = 1,
    EXECUTING = 2,
    RESOLVED = 3,
    REJECTED = 4,
    DESTROYED = 5
}
export interface ITaskOptions {
    timeoutMs?: number;
    desc?: string;
    workflow: Workflow;
    parentId?: string;
    groups?: string[];
}
declare class Task extends EventEmitter {
    _id: string;
    _parentId: string;
    _promise: Promise<any>;
    _resolve: Function;
    _reject: Function;
    _subtasks: Map<string, Task>;
    _readyFlag: boolean;
    _timeoutMs: number;
    _timeout: any;
    _properties: Map<string, any>;
    _function: Function;
    _description: string;
    _workflow: Workflow;
    _status: TaskStatus;
    _ts: number;
    _groups: string[];
    constructor(id: string, options: ITaskOptions, fun: Function);
    destroy(): void;
    get description(): string;
    set id(id: string);
    get id(): string;
    set parentId(parentId: string);
    get parentId(): string;
    execute(): Promise<any>;
    executeAndResolve(): Promise<any>;
    /**
     * Execute an event in async way
     * @param eventName
     * @param handler
     */
    onAsync(eventName: string, handler: Function): void;
    execSubTasks(): Promise<void>;
    execSubTasks1by1(): Promise<void>;
    setTimeout(): void;
    hasTimeout(): boolean;
    setProperty(key: string, value: any): void;
    getProperty(key: string): any;
    get properties(): Map<string, any>;
    get status(): TaskStatus;
    clearProperties(): void;
    getPromise(): Promise<any>;
    resetReadyFlag(): void;
    addSubTask(task: Task): void;
    addSubTasks(tasks: Task[]): void;
    getSubTask(id: string): Task | undefined;
    clearSubTasks(): void;
    ready(): void;
    resolve(result: any): void;
    reject(err: any): void;
    recordTaskPerf(): void;
}
export { Task, TaskStatus };
