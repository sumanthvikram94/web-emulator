import { InternalDatabaseInterface } from '../main/db-interface.js';
import { TxnData } from './transaction.js';
interface BlockData {
    index: number;
    prevHash: string;
    transactions: TxnData[];
    timestamp?: number;
    difficulty?: number;
    hash?: string;
    nonce?: number;
    isGenesis?: boolean;
    redundentBlocks?: BlockData[];
    competeFactor?: number;
    blockUID?: string;
    createdBy?: string;
    branches?: BlockData[];
}
declare class Block implements BlockData {
    isConflictWithApproved: boolean;
    isApproved: boolean;
    redundentBlocks: BlockData[];
    constructor(data: BlockData);
    get createdBy(): any;
    get competeFactor(): any;
    get branches(): BlockData[];
    set branches(branches: BlockData[]);
    setRedundentBlocks(blocks: BlockData[]): void;
    getRedundentBlocks(): BlockData[];
    calculateHash(): any;
    executeTxns(db: InternalDatabaseInterface): Promise<any[]>;
    toJSON(): any;
    /**
     * @description Update the hash of the block.
     * @memberof Block
     */
    private updateHash;
    /**
     * @description Increment the nonce until a valid hash is obtained with enough 0's at the beginning (based on the difficulty).
     * @memberof Block
     */
    private proofOfWork;
    get blockUID(): any;
    /**
     * @description Get the block's transactions.
     * @return {Transaction[]} Transaction
     * @memberof Block
     */
    get transactions(): any;
    /**
     * @description Get the timestamp associated to the block.
     * @return {number} Timestamp
     * @memberof Block
     */
    get timestamp(): any;
    /**
     * @description Get the previous hash.
     * @return {string} Previous hash
     * @memberof Block
     */
    get prevHash(): string;
    set prevHash(hash: string);
    /**
     * @description Get the block's hash which also acts as its header.
     * @return {Object} Hash
     * @memberof Block
     */
    get hash(): any;
    /**
     * @description Get the block's height within a chain.
     * @return {number} Height
     * @memberof Block
     */
    get index(): number;
    set index(idx: number);
    /**
     * @description Check if the block is valid.
     * @return {boolean} Validity
     * @memberof Block
     */
    isValid(): boolean;
    /**
     * @description Check if this block is a genesis block.
     * @return {boolean} Genesis block?
     * @memberof Block
     */
    getIsGenesis(): boolean;
}
export { Block, BlockData };
