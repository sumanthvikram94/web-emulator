import { InternalDatabaseInterface } from '../main/db-interface.js';
interface TxnData {
    type: string;
    subject: string;
    data: any;
    options?: any;
    timestamp?: number;
    hash?: string;
}
/**
 * @class Transaction
 */
declare class Transaction implements TxnData {
    /**
     * @description Crypto transaction.
     * @param {Object} obj Details of the transaction
     * @param {string} obj.fromAddr Address of the sender
     * @param {Key} obj.fromPubKey Public key of the sender
     * @param {string} obj.toAddr Address of the receiver
     * @param {number} [obj.amount=0] Amount of coins
     * @param {string=} [obj.sig] Signature of the sender
     * @param {number} [obj.fee=0] Transaction fee
     * @version 3
     * @memberof Transaction
     * @throws {Error} No fromAddr/fromPubKey/toAddr property
     */
    constructor(data: TxnData);
    /**
     * @description Calculate the hash of the transaction.
     * @return {string} Hash
     * @memberof Transaction
     */
    calculateHash(): string;
    /**
     * @description Update the hash of the block.
     * @memberof Transaction
     */
    updateHash(): void;
    toJSON(): any;
    execute(db: InternalDatabaseInterface): Promise<any>;
    /**
     * @description Get the transaction's timestamp.
     * @return {number} Timestamp
     * @memberof Transaction
     */
    get timestamp(): any;
    /**
     * @description Get the transaction's hash.
     * @return {string} Hash
     * @memberof Transaction
     */
    get hash(): any;
    get subject(): any;
    get type(): any;
    get data(): any;
    /**
     * @description Check if the hash is valid.
     * @return {boolean} Validity
     * @memberof Transaction
     */
    isValid(): boolean;
    /**
     * @description Check if the signature is valid.
     * @return {boolean} Validity
     * @memberof Transaction
     */
    hasValidSignature(): boolean;
}
export { Transaction, TxnData };
