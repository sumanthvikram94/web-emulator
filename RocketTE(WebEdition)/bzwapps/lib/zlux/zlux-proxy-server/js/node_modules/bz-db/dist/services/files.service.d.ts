/// <reference types="node" />
import fs from 'fs';
import { PersistType } from '../main/metadata.js';
interface FileSize {
    fileName: string;
    size: number;
}
interface FileContent {
    fileName: string;
    content: string;
}
declare class FileService {
    _fileStats: Map<string, fs.Stats>;
    constructor();
    getFileStat(fileName: string): fs.Stats | undefined;
    setFileStat(fileName: string, stat: fs.Stats): void;
    removeFileStat(fileName: string): void;
    getFiles(dir: string): string[];
    existFileSync(fileName: string): boolean;
    readJSON(fileName: string, encoding?: string): Promise<any>;
    getData(dir: string, subName: string): Promise<any>;
    getFilesAsync(dir: string): Promise<string[]>;
    getFileSize(filePath: string, fileName: string): Promise<FileSize | undefined>;
    getDirFileSize(dir: string, subName?: string): Promise<FileSize[]>;
    getDirFileContents(dir: string, subName?: string): Promise<FileContent[]>;
    getDataMap(dir: string, subName: string, isWatchFile?: boolean): Promise<Map<string, any>>;
    /**
     * Reads all files in a dir, returns file name and file content as JSON or raw data.
     * @param dir
     * @param subName file name filter
     * @param isRawData True to return file content without parsing as JSON
     * @param isAllowSubFolder True to include files in sub folder
     * @returns object[]
     */
    returnDataWithName(dir: string, subName: string, persistType?: PersistType, isAllowSubFolder?: boolean): Promise<any>;
    getLeafFiles(dir: string): string[];
    readFileAsync(path: string, opts?: string): Promise<string>;
    readFilePromise(path: string, opts?: string, isWatchFile?: boolean): Promise<any>;
    readBufferFilePromise(path: string): Promise<any>;
    convertToJsonWithComment(fileAsString: string): any;
    getDir(filePath: string): string;
    clearNFSClientCache(dir: string, callback: Function): void;
    clearNFSClientCacheAsync(dir: string): Promise<unknown>;
}
export { FileService, FileContent };
