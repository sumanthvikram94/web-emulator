/// <reference types="better-queue" />
import { Task } from './task.js';
import { TaskQueue } from './task-queue.js';
export interface ITaskCreationOptions {
    timeoutMs?: number;
    desc?: string;
    workflow?: Workflow;
    parentId?: string;
    groups?: string[];
}
declare class Workflow {
    _queue: TaskQueue;
    _tasks: Map<string, Task>;
    _timeouts: Map<string, any>;
    _tasksLifeTime: Map<string, number>;
    _groups: Map<string, Map<string, Task>>;
    constructor();
    createTask(id: string, options: ITaskCreationOptions, fun: Function): Task;
    getGroupTasks(groups: string[]): any;
    waitForTaskGroups(groups: string[]): Promise<void>;
    /**
     * Generate a new task to run the given function. Use the given ID or otherwise generate an id if it's not provided.
     */
    generateTask(options: ITaskCreationOptions, fun: Function, id?: string): Task;
    getTask(id: string): Task | undefined;
    isOverwhelmed(): boolean;
    describeTasks(isInfo?: boolean): void;
    existsTaskDesc(desc: string): boolean;
    searchTaskDesc(desc: string): Task[];
    enqueueTask(task: Task): Promise<any>;
    executeTask(task: Task): Promise<any>;
    bookTask(task: Task, timeout: number): Promise<void>;
    getTaskSize(): number;
    getQueueStats(): import("better-queue").QueueStats;
    destroy(): void;
    getPerfRecords(): Map<string, number>;
}
export { Workflow };
