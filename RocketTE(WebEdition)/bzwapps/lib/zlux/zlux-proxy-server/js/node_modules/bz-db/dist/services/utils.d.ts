import { BlockChain, BlockChainStat } from "../blockchain/blockchain.js";
import { DbWorker } from '../main/db-worker.js';
declare class Utils {
    static mapToString(map: Map<any, any>): string;
    static stringToMap(str: string): Map<unknown, unknown>;
    static mapToArray(map: Map<any, any>): [any, any][];
    static arrayToMap(arr: any[]): Map<string, any>;
    static arrayToChainMap(arr: any[]): Map<string, BlockChain>;
    static arrayToBCSMap(arr: any[]): Map<string, BlockChainStat>;
    /**
     *
     * @param arr Array of object
     * @param propertyName object[propertyName] must be number
     */
    static sumArray(arr: any[], propertyName: string): number;
    static andArray(arr: any[]): boolean;
    static generateHash(val: string): string;
    /**
     *
     * @param arrs
     * @returns cartesian of arrays inside input arrs
     */
    static cartesian(arrs: any[]): any;
    /**
     * Turn {id1:[1,2], id2:[3,4]} into [{id1:1,id2:3}, {id1:1,id2:4}, {id1:2, id2:3}, {id1:2, id2:4}]
     * @param obj
     * @returns
     */
    static splitObject(obj: any): any[];
    static isFreePort(port: number): Promise<boolean>;
    static getFreePortSince(port: number): Promise<number>;
    static shutdown(worker: DbWorker): Promise<void>;
    static waitTime(ms?: number): Promise<unknown>;
    static wait(callback: Function, interval?: number, count?: number): Promise<boolean>;
    static getServerNameFromUrl(url: string): string;
    static getParamObject(message: string, detail: string, type: string, remotePeerId: string | undefined, metadata: any, dataEntity?: string, localLastBlockTime?: string, peerLastBlockTime?: string): {
        message: string;
        detail: string;
        type: string;
        remotePeerId: string;
        localPeerId: any;
        localIP: any;
        serverName: string;
        dataEntity: string;
        localLastBlockTime: string;
        peerLastBlockTime: string;
        localLastBlockDateTime: string;
        peerLastBlockDateTime: string;
    };
    static transferTimestampToDateTime(timestamp: string): string;
    static transferTimestampToDate(timestamp?: string): string;
    static date2DateString(date: Date, dateOnly?: boolean, timeOnly?: boolean): string;
}
export { Utils };
