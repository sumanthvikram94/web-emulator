import { Libp2p } from 'libp2p';
import { IPeerMeta } from './node-metadata.js';
import { PrivateNet } from './private-net.js';
import { PrivateNetNode } from './private-net-node.js';
import { DbWorker } from '../main/db-worker.js';
import { MessageSender } from './message-sender.js';
import { FileSyncInfo } from '../main/file-sync.js';
interface BatchTxnValidation {
    isValid: boolean;
    inValidSubjects: any[];
}
export interface IAutoScaleResult {
    status: boolean;
    peerMeta?: IPeerMeta;
    message?: string;
}
/**
 * Handles tcp msg and node events
 */
declare class NodeMsgHandler {
    _node: Libp2p;
    _pnNode: PrivateNetNode;
    _worker: DbWorker;
    _net: PrivateNet;
    _privateChannels: string[];
    _strangerChannels: string[];
    _publicChannels: string[];
    _msgSender: MessageSender;
    _textDecoder: TextDecoder;
    constructor(node: PrivateNetNode, worker: DbWorker, net: PrivateNet);
    private ensureHandlers;
    get worker(): DbWorker;
    /**
     * For manually UT only. Take input into terminal, and do the functions.
     * Use TAB to seperate the commands, e.g.:
     * select   testDE
     */
    private listenToStdin;
    /**
     * Handlers for events of libp2p
     */
    private setNodeEventHandlers;
    /**
     * Set a handler for messages received on each channel (or called protocol by libp2p)
     */
    private setReceiveHandlers;
    /**
     * Parse the message received, and return the parsed TaskMessage object.
     * It will handle message fragmenting as well
     * @param buffList The message received is put into list of buffers
     * @param connection
     * @param protocol
     * @returns TaskMessage: {peer: NodeInfo, taskid: string, payload: any}
     */
    private parseMsg;
    channelAuthCheck(channel: string, connection: any): boolean;
    /**
     * Send a reject message to the unauthorized node.
     * @param data
     */
    rejectUnauthorized(data: any): Promise<void>;
    /**
     * Invokes the message handling of libp2p
     * @param channel
     * @param handlerFunc
     */
    private setMsgHandler;
    /**
     * Handle the auto-scale request. For the 1st request, it sends the peer metadata, for further requests, it doesn't send metadata, but send a msg.
     * @param data
     */
    private handleAutoScale;
    /**
     * Receives the peer metadata and continue the auto-scale task processing.
     * @param data
     */
    private handleAutoScaleRes;
    /**
     * Executes a command
     */
    private handleCmd;
    /**
     * Response of command execution
     */
    private handleReject;
    /**
     * Response of command execution
     */
    private handleCmdRes;
    /**
     * Msg handler for channel: introduce
     * @param data
     */
    private handleIntroduce;
    /**
     * Msg handler for channel: kick
     * @param data
     */
    private handleKick;
    /**
     * Msg handler for channel: happyToJoin
     * @param data
     */
    private handleHTJ;
    /**
     * Msg handler for channel: leave
     * @param data
     */
    private handleLeave;
    /**
     * Msg handler for channel: status
     * @param buff
     */
    private handleForcePullGo;
    /**
     * BZ-15355, sync file for cluster
     * @param data
     */
    private handleFileSyncPullDone;
    /**
     * Msg handler for channel: status
     * @param data
     */
    private handleForcePullDone;
    /**
     * Msg handler for channel: status
     * @param data
     */
    private handleReqCheckin;
    /**
     * Msg handler for channel: status
     * @param data
     */
    private handleReqCheckinAck;
    /**
     * Msg handler for channel: status
     * @param data
     */
    private handleStatus;
    /**
     * Msg handler for channel: status
     * @param data
     */
    private handleSelectMemory;
    /**
   * Msg handler for channel: pong
   * @param data
   */
    private handleSelectMemoryDone;
    /**
     * Msg handler for channel: ping
     * @param data
     */
    private handlePing;
    /**
     * Msg handler for channel: pong
     * @param data
     */
    private handlePong;
    /**
     * Msg handler for channel: checkin
     * @param data
     */
    private handleCheckin;
    /**
     * Msg handler for channel: checkin-res
     * @param data
     */
    private handleCheckinRes;
    /**
     * Msg handler for channel: pull
     * @param data
     * @returns
     */
    private handlePull;
    /**
     * Msg handler for channel: pull-res
     * @param data
     */
    private handlePullRes;
    private handlePushGo;
    private handlePushDone;
    private handleConflictGo;
    private handleConflictDone;
    /**
     * Msg handler for channel: txn
     * @param data
     */
    private handleTxn;
    /**
     * Msg handler for channel: txn
     * @param data
     */
    private handleBatchTxn;
    /**
     * Msg handler for channel: txn-confirm
     * @param data
     */
    private handleBatchTxnConfirm;
    /**
     * Msg handler for channel: txn-confirm
     * @param data
     */
    private handleTxnConfirm;
    /**
    * Msg handler for channel: status-confirm
    * @param data
    */
    private handleStatusConfirm;
    /**
     * Msg handler for channel: txn-go
     * @param data
     */
    private handleBatchTxnGo;
    /**
     * Msg handler for channel: txn-go
     * @param data
     */
    private handleTxnGo;
    /**
     * Msg handler for channel: txn-done
     * @param data
     */
    private handleBatchTxnDone;
    /**
     * Msg handler for channel: txn-done
     * @param data
     */
    private handleTxnDone;
    /**
     * BZ-15355, sync file for cluster
     * create read scream and sent file content
     */
    sendFileToPeer(peerId: string, taskId: string, fsi: FileSyncInfo): Promise<any>;
    /**
     * BZ-15355, sync file for cluster
     * handle file transfer request, add queue to send file
     */
    private handleFileTransferReq;
    /**
     * BZ-15355, sync file for cluster
     * handle file transfer response, parse data header and save file content to file
     */
    private handleFileTransferRes;
    /**
     *
     * @param peer
     * @param channel
     * @returns The stream to send msg to the peer and channel
     */
    private ensureSendStreamForPeer;
    /**
     * Sends message to the given peer and channel
     * @param peer
     * @param channel
     * @param msg
     */
    sendMsgToPeer(peer: IPeerMeta, channel: string, msg: string, isNotZipped?: boolean): Promise<void>;
}
export { NodeMsgHandler, BatchTxnValidation };
