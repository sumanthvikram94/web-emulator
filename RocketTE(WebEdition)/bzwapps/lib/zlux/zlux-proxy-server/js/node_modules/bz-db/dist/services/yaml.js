import { parseDocument, stringify, parse } from 'yaml';
import _ from 'lodash';
function getKeysTree(obj, prefix = []) {
    let keysArray = [];
    for (const key in obj) {
        const value = obj[key];
        if (Array.isArray(value)) {
            value.forEach((element, index) => {
                const currentKeyArray = [...prefix, key, index];
                keysArray.push(currentKeyArray);
                if (typeof element === "object" && element !== null && !Array.isArray(element)) {
                    const childKeys = getKeysTree(element, currentKeyArray);
                    keysArray = keysArray.concat(childKeys);
                }
            });
        }
        else {
            const currentKeyArray = [...prefix, key];
            keysArray.push(currentKeyArray);
            if (typeof value === "object" && value !== null && !Array.isArray(value)) {
                const childKeys = getKeysTree(value, currentKeyArray);
                keysArray = keysArray.concat(childKeys);
            }
        }
    }
    return keysArray;
}
/**
 * Class to convert between yaml and json.
 */
class Yaml {
    constructor() {
    }
    /**
     * Reads a yaml string and converts it to json. It keeps the yaml comments into json object as __bzdb_yaml_metadata.comments
     * @param str
     * @returns
     */
    yamlStrToJson(str) {
        const doc = parseDocument(str);
        const json = doc.toJSON();
        if (json && typeof (json) === 'object') {
            const comments = [];
            if (doc.comment || doc.commentBefore) { // Record the doc level comments
                const commentObj = {
                    key: ''
                };
                if (doc.comment) {
                    commentObj.comment = doc.comment;
                }
                if (doc.commentBefore) {
                    commentObj.commentBefore = doc.commentBefore;
                }
                comments.push(commentObj);
            }
            const jsonkeys = getKeysTree(json);
            jsonkeys.forEach((key) => {
                const node = doc.getIn(key, true);
                if (node && (node.comment || node.commentBefore)) { // Record node level comments
                    const commentObj = {
                        key
                    };
                    if (node.comment) {
                        commentObj.comment = node.comment;
                    }
                    if (node.commentBefore) {
                        commentObj.commentBefore = node.commentBefore;
                    }
                    comments.push(commentObj);
                }
            });
            if (comments.length > 0) {
                json['__bzdb_yaml_metadata'] = { comments };
            }
            return json;
        }
        else {
            return {};
        }
    }
    /**
     * Converts JSON object into YAML string. It adds YAML comments according to the __bzdb_yaml_metadata.comments in the object
     * @param inputObj
     * @returns
     */
    jsonToYAMLStr(inputObj) {
        if (inputObj && typeof (inputObj) === 'object') {
            const obj = _.cloneDeep(inputObj);
            if (obj['__bzdb_yaml_metadata']) {
                const comments = (obj['__bzdb_yaml_metadata']) ? obj['__bzdb_yaml_metadata'].comments : undefined;
                delete obj['__bzdb_yaml_metadata'];
                const doc = parseDocument(stringify(obj));
                if (comments && Array.isArray(comments) && comments.length > 0) {
                    comments.forEach((cmt) => {
                        if (cmt.key === '') {
                            doc.comment = cmt.comment;
                            doc.commentBefore = cmt.commentBefore;
                        }
                        else {
                            const node = doc.getIn(cmt.key, true);
                            if (node) {
                                node.comment = cmt.comment;
                                node.commentBefore = cmt.commentBefore;
                            }
                        }
                    });
                }
                return doc.toString();
            }
            else {
                return stringify(obj);
            }
        }
        else {
            return '';
        }
    }
    /**
     * Expose the parse function of yaml package. It doesn't keep comments in the JSON object.
     */
    yamlParse(str) {
        return parse(str);
    }
    /**
     * Expose the stringify function of yaml package. It doesn't write comments into yaml string.
     * @param obj
     * @returns
     */
    yamlStringify(obj) {
        return stringify(obj);
    }
}
const yaml = new Yaml();
export { yaml };
// UT
// const str = yaml.jsonToYAMLStr({
//     key1: 'value1',
//     __bzdb_yaml_metadata: {
//         comments: [{key: ['key2'], comment: 'You can not see me.'}]
//     }
// })
// console.log(str)
// console.log(str === 'key1: value1\n')
// const yaml_str = `
// # A commented document
// ---
// apiVersion: apps/v1
// kind: StatefulSet
// metadata:
//   name: ss-rtew # name of ss
//   namespace: termbz
// spec:
//   selector:
//     matchLabels:
//       app: rtew
//   serviceName: "svc-rtew-headless"
//   replicas: 1
//   minReadySeconds: 10
//   template:
//     metadata:
//       labels:
//         app: rtew
//     spec:
//       # specification for pod
//       terminationGracePeriodSeconds: 10
//       containers:
//       - name: rtew
//         image: 363261076729.dkr.ecr.us-east-1.amazonaws.com/termbz:latest
//         ports:
//         # ports to expose
//         - containerPort: 8543 # http
//         - containerPort: 8643 # cluster
//     # end of specification for pod
// `
// console.log('str: ' + stringify({}))
// console.log('str: ' + yaml.jsonToYAMLStr({}))
// console.log('str: ' + yaml.jsonToYAMLStr('aaa'))
// console.log('str: ' + yaml.jsonToYAMLStr(undefined))
// console.log('str: ' + yaml.jsonToYAMLStr(null))
// console.log('str: ' + yaml.jsonToYAMLStr(''))
// console.log('str: ' + yaml.jsonToYAMLStr(123))
// console.log(yaml.yamlStrToJson('123'))
// console.log(yaml.yamlStrToJson('#'))
// console.log(yaml.yamlStrToJson('# 123'))
// console.log(yaml.yamlStrToJson(''))
// console.log(yaml.yamlStrToJson('aa:bb'))
// console.log(yaml.yamlStrToJson(':aa'))
