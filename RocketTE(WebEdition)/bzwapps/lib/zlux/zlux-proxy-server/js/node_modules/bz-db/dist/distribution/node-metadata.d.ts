/**
 * Handle logics that transforms data format for meta_node and meta_peers
 */
import type { PeerId } from '@libp2p/interface-peer-id';
import { Multiaddr } from '@multiformats/multiaddr';
import { ClusterNodeType } from '../main/metadata';
interface INodeInfoBasic {
    id: string;
    peerId?: IPeerIdJson;
    port?: number;
    version?: any;
}
interface IPeerIdJson {
    id: string;
    pubKey: string;
    privKey?: string;
}
export interface INodeMeta extends INodeInfoBasic {
    localAddrs: string;
}
export interface IPeerMeta extends INodeInfoBasic {
    multiaddrs: string[];
    serverURL?: string;
    developmentMode?: any;
    localIp?: string;
    timestamp?: number;
    nodeType?: ClusterNodeType;
}
export interface INodeMetaExtended extends INodeInfoBasic {
    localAddrs?: string;
    multiaddrs?: string[];
    serverURL?: string;
    developmentMode?: any;
    localIp?: string;
    timestamp?: number;
    peerIdInst?: PeerId;
    nodeType?: ClusterNodeType;
}
export declare class NodeMetadata {
    id: string;
    peerId: IPeerIdJson;
    peerIdInst: PeerId;
    multiaddrs: Multiaddr[];
    privateKey: Uint8Array;
    localAddrs: string;
    serverURL?: string;
    port?: number;
    version?: any;
    developmentMode?: any;
    localIp?: string;
    timestamp?: number;
    nodeType?: ClusterNodeType;
    _nodeMetaExt: INodeMetaExtended;
    _peerMeta?: IPeerMeta;
    _nodeMeta?: INodeMeta;
    constructor();
    static fromJSON(nodeMetaExt: INodeMetaExtended): Promise<NodeMetadata>;
    updateMultiaddrs(multiaddrs: Multiaddr[]): void;
    updateTimestamp(ts: number): void;
    getPeerMeta(): IPeerMeta | undefined;
    getNodeMeta(): INodeMeta | undefined;
}
export interface IProcessOptions {
    action: string;
    handler: any;
    data?: any;
}
export interface ITaskMessage {
    peer: IPeerMeta;
    taskid: string;
    payload: any;
    isNotZipped: boolean;
}
export interface IPeerState {
    id: string;
    peer: NodeMetadata;
    status?: string;
}
export {};
