import Queue from 'better-queue'
import { Task } from './task.js'
import { Logger } from '../services/index.js'
// import  * as ACTIONS from '../constants/actions'

interface QueueOptions{
    task: Task
}

class TaskQueue {

    _q: Queue
    constructor(){
        this._q = new Queue(async (options: QueueOptions, cb) => {
            if (!options || !options.task ){
                cb({status: false, message: `Incorrect queue options`})
                return
            }
            try{
                const task = options.task
                // task.setTimeout()
                await task.execute()
                const result = await task.getPromise()
                cb(null, result)
            }catch(e){
                Logger.logError(e)
                cb({status: false, message: e.message});
            }
        }, { maxRetries: 0, retryDelay: 1000});
        this._q.on('task_finish', (id, res) => {
            Logger.logDebug('task finish: ' + id)
            Logger.logDebug('task result: ' + res)
        })
        this._q.on('task_started', (id) => {
            Logger.logDebug('task started: ' + id)
        })
    }

    push(task: Task): Promise<any>{
        return new Promise((resolve, reject) => {
            this._q.push({task}, (err: any, result: any) => {
                if (err) {
                    reject(err)
                } else {
                    resolve(result)
                }
            })
        })
    }
}

export {
    TaskQueue, QueueOptions
}