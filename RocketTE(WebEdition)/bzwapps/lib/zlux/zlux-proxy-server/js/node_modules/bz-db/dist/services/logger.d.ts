declare enum LogLevel {
    SILENT = -1,
    SEVERE = 0,
    WARN = 1,
    INFO = 2,
    DEBUG = 3
}
interface ITimeTracer {
    trace(msg: string): void;
}
interface ILogger {
    setLogLevel(level: LogLevel): void;
    logDebug(msg: string, subTopic?: string): void;
    logInfo(msg: string, subTopic?: string): void;
    logWarn(msg: string, subTopic?: string): void;
    logSevere(msg: string, subTopic?: string): void;
    logError(e: Error, subTopic?: string): void;
}
interface ILevelLogger {
    logInfo(msg: string): void;
    logWarn(msg: string): void;
    logSevere(msg: string): void;
    logError(e: Error): void;
    logDebug(msg: string): void;
}
interface ILoggerConfig {
    type: string;
    fileName?: string;
    logLevel?: LogLevel;
}
declare class LoggerConfigurer {
    static setProcessName(name: string): void;
    static setWriter(config?: ILoggerConfig): void;
}
declare class DefaultLogger implements ILogger {
    protected _level: LogLevel;
    protected _logger: ILevelLogger;
    constructor(level?: LogLevel);
    setLogLevel(level: LogLevel): void;
    logDebug(msg: string): void;
    logInfo(msg: string): void;
    logWarn(msg: string): void;
    logSevere(msg: string): void;
    logError(e: Error): void;
}
/**
 * Logger for specific topics. E.g. performance, transaction, network etc.
 */
declare class TopicLogger extends DefaultLogger {
    protected _topic: string;
    constructor(topic: string, level?: LogLevel);
    protected appendTopicToMsg(msg: string, subTopic?: string): string;
    logDebug(msg: string, subTopic?: string): void;
    logInfo(msg: string, subTopic?: string): void;
    logWarn(msg: string, subTopic?: string): void;
    logSevere(msg: string, subTopic?: string): void;
    logError(e: Error, subTopic?: string): void;
}
interface ILoggers {
    [key: string]: ILogger;
}
declare const loggers: ILoggers;
declare let timeTracer: ITimeTracer;
export { ILoggerConfig, TopicLogger, loggers, LoggerConfigurer, ILogger, DefaultLogger, timeTracer };
