import { EventEmitter } from 'events';
import { STATUS } from '../constants/status.js';
class EventHandler {
    constructor() {
        this.listenStatusMap = {};
        this._eventType = [STATUS.DATA_CONFLICT, 'internalDbReady'];
        this.occuredEventMap = {};
        this._emitter = new EventEmitter();
        this._eventType.forEach(e => {
            this.listenStatusMap[e] = false;
            this.occuredEventMap[e] = [];
        });
    }
    get emitter() {
        return this._emitter;
    }
    onEvent(cmd, callback) {
        this._emitter.on(cmd, (param) => {
            setImmediate(() => {
                if (callback) {
                    callback(param);
                }
            });
        });
        this.listenStatusMap[cmd] = true;
        if (this.occuredEventMap[cmd].length > 0) {
            this.occuredEventMap[cmd].forEach((event) => {
                this._emitter.emit(event.cmd, event.parames);
            });
        }
    }
}
const eventHandler = new EventHandler();
export { eventHandler };
