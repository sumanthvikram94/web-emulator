const util = require('util');
const exec = util.promisify(require('child_process').exec);
const fse = require('fs-extra')
const path = require('path')

const gitignorePath = path.resolve(__dirname + '/.gitignore')
const gitignoreTagPath = path.resolve(__dirname + '/gitignore.tag')
const gitignoreBkPath = path.resolve(__dirname + '/.gitignore.bk')

async function run(cmd){
    const { stdout, stderr } = await exec(cmd)
    if (stderr){
        console.error(stderr) 
    }
    return stdout
}

async function getLatestTag(){
    const tagsStrs = await run('git ls-remote --tags origin')
    const tagsStrArr = tagsStrs.split('\n')
    let tag = {major: 0, minor: 0, patch: 0}
    tagsStrArr.forEach(tagstr => {
        const tmpArr = tagstr.split('refs/tags/v')
        if (tmpArr.length < 2){
            return
        }
        const tagArr = tagstr.split('refs/tags/v')[1].split('.')
        if (Number(tagArr[0]) > Number(tag.major)){
            tag = {
                major: Number(tagArr[0]),
                minor: Number(tagArr[1]),
                patch: Number(tagArr[2] === undefined? 0: tagArr[2])
            }
        } else if (Number(tagArr[0]) === Number(tag.major)){
            if (Number(tagArr[1]) > Number(tag.minor)){
                tag = {
                    major: Number(tagArr[0]),
                    minor: Number(tagArr[1]),
                    patch: Number(tagArr[2] === undefined? 0: tagArr[2])
                }
            } else if (Number(tagArr[1]) === Number(tag.minor)){
                if (Number(tagArr[2]) > Number(tag.patch)){
                    tag = {
                        major: Number(tagArr[0]),
                        minor: Number(tagArr[1]),
                        patch: Number(tagArr[2] === undefined? 0: tagArr[2])
                    }
                }
            }
        }
        // tag = {
        //     major: Number(tagArr[0]),
        //     minor: Number(tagArr[1]),
        //     patch: Number(tagArr[2] === undefined? 0: tagArr[2])
        // }
    })
    return tag
}

function increaseTag(type, tag){
    if (type === 0){
        console.log('Tagging on major.minor.[patch] level')
        tag.patch ++
    } else if (type === 1) {
        console.log('Tagging on major.[minor].0 level')
        tag.patch = 0
        tag.minor ++
    } else {
        console.log('Tagging on [major].0.0 level')
        tag.patch = 0
        tag.minor = 0
        tag.major ++
    }
    const filePath = path.resolve(__dirname + '/version.json')
    fse.writeFileSync(filePath, JSON.stringify(tag))
}

async function npmBuild(){
    const distPath = path.resolve(__dirname + '/dist')
    fse.emptyDirSync(distPath)
    await run('npm run build:prod')
}

function mvGitIgnore(){
    fse.moveSync(gitignorePath, gitignoreBkPath)
    fse.moveSync(gitignoreTagPath, gitignorePath)
}

function mvGitIgnoreBack(){
    fse.moveSync(gitignorePath, gitignoreTagPath)
    fse.moveSync(gitignoreBkPath, gitignorePath)
}

function changePackage(tag){
    const packageFile = path.resolve(__dirname + '/package.json')
    const packageJson = JSON.parse(fse.readFileSync(packageFile))
    packageJson['version'] = `${tag.major}.${tag.minor}.${tag.patch}`
    fse.writeFileSync(packageFile, JSON.stringify(packageJson, null, 2))
}

/**
 * 
 * @param {*} type 0 - patch, 1 - minor, 2 - major
 */
async function buildProcess(type = 0){
    await run('git checkout master')
    await run('git checkout -- *')
    await run('git pull origin master')
    await run('git checkout --detach')
    const tag = await getLatestTag()
    let tagStr = 'v' + tag.major + '.' + tag.minor + '.' + tag.patch
    console.log('Latest existing tag: ' + tagStr)
    increaseTag(type, tag)
    tagStr = 'v' + tag.major + '.' + tag.minor + '.' + tag.patch
    console.log('New tag: ' + tagStr)
    console.log('Building the dist')
    await npmBuild()
    console.log('Changing .gitignore')
    mvGitIgnore()
    console.log('Changing version in package.json')
    changePackage(tag)
    console.log('Add changed code')
    await run('git add package.json')
    await run('git add .gitignore')
    await run('git add dist/*')
    await run('git add version.json')
    console.log('Committing the code')
    await run('git commit -m "tagging for ' + tagStr)
    console.log('Doing tagging')
    await run('git tag ' + tagStr)
    await run('git push origin ' + tagStr)
    console.log('Going back to master branch')
    mvGitIgnoreBack()
    await run('git checkout -- *')
    await run('git reset --hard')
    await run('git checkout master')
    await run('git pull origin master')
    console.log('Tagging completed!!!')
    console.log('===============================================')
}

console.log('===============================================')
console.log('Tagging starts!!!')

var myArgs = process.argv.slice(2);

buildProcess(Number(myArgs[0] || 0))
// exports.result = result;