/// <reference types="node" />
/// <reference types="node" />
import crypto from 'crypto';
declare class Encryption {
    static rKey: Buffer;
    static rIV: Buffer;
    static rString: string;
    static encryptWithKeyAndIV(text: string, key: any, iv: Buffer): string;
    static decryptWithKeyAndIV(text: string, key: any, iv: Buffer): any;
    static getKeyFromValue(text: crypto.BinaryLike, salt: crypto.BinaryLike, length: any, callback: any): void;
    static getKeyFromValueSync(value: crypto.BinaryLike, salt: any, length: any): Buffer;
    static generateSaltIv(value: string): {
        salt: any;
        iv: any;
    };
    static encryptWithKeyConstIV(text: string, akey: string): {
        text: string;
        key: string;
    };
    static decryptWithKeyConstIV(text: string, akey: string): string;
    static encrypt(encryptAttrs: string[], data: any): Promise<any>;
    static decrypt(encryptAttrs: string[] | undefined, data: Array<any> | any): void;
    static _decrypt_(encryptAttrs: string[], data: any): void;
}
export { Encryption };
